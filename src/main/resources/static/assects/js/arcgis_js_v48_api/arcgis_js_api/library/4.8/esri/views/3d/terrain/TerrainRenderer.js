// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.8/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/terrain/TerrainMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3csnippet name\x3d"getOverlayColor"\x3e\x3c![CDATA[\r\n  vec4 getOverlayColor(vec4 texCoords, float opacity) {\r\n    vec4 color \x3d vec4(0, 0, 0, 0);\r\n\r\n    if ((texCoords.x \x3e 0.0) \x26\x26 (texCoords.x \x3c 1.0) \x26\x26 (texCoords.y \x3e 0.0) \x26\x26 (texCoords.y \x3c 1.0)) {\r\n      // inner overlay texture coordinates are within bounds -\x3e sample from inner overlay\r\n      color \x3d texture2D(overlay0Tex, texCoords.xy);\r\n    } else if ((texCoords.z \x3e 0.0) \x26\x26 (texCoords.z \x3c 1.0) \x26\x26 (texCoords.w \x3e 0.0) \x26\x26 (texCoords.w \x3c 1.0)) {\r\n      // sample from outer overlay\r\n      color \x3d texture2D(overlay1Tex, texCoords.zw);\r\n    }\r\n\r\n    return color * opacity;\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"applySkirts"\x3e\x3c![CDATA[\r\n  uniform float skirtScale;\r\n\r\n  vec3 applySkirts(inout vec2 uv, vec3 vpos, vec3 vnormal) {\r\n    float skirtLength \x3d 0.0;\r\n\r\n    if (uv.x \x3e\x3d 2.0) {\r\n      skirtLength \x3d uv.y * skirtScale;\r\n      // decode original uv-coordinates (see `encodeSkirtPos`)\r\n      vec2 x \x3d vec2(uv.x) - vec2(3.5, 4.5);\r\n      uv \x3d clamp(vec2(1.5) - abs(x), vec2(0.0), vec2(1.0));\r\n    }\r\n\r\n    return vpos - vnormal * skirtLength;\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"vsTerrain"\x3e\x3c![CDATA[\r\n  $vsprecisionf\r\n\r\n  uniform mat4 proj;\r\n  uniform mat4 view;\r\n  uniform vec3 origin;\r\n  uniform vec4 texOffsetAndScale;\r\n  uniform mat4 viewNormal;\r\n\r\n  attribute vec3 $position;\r\n  attribute vec2 $uv0;\r\n  varying vec2 vtc;\r\n  varying vec3 vpos;\r\n  varying vec3 vnormal;\r\n\r\n#ifdef RECEIVE_SHADOWS\r\n  varying float linearDepth;\r\n#endif\r\n\r\n#if defined(WIREFRAME) || defined(TILE_BORDERS)\r\n  varying vec2 vuv;\r\n#endif\r\n\r\n#ifdef ATMOSPHERE\r\n  uniform vec3 lightDirection;\r\n  varying vec3 wpos;\r\n  varying vec3 wview;\r\n  varying vec3 wnormal;\r\n  varying vec3 wlight;\r\n#endif\r\n\r\n#ifdef OVERLAY\r\n  // these variables combine two possible overlays into one by using a vec4:\r\n  // components x/y are x/y of overlay 0, and components z/w are x/y of overlay 1\r\n  uniform vec4 overlayTexOffset;\r\n  uniform vec4 overlayTexScale;\r\n  varying vec4 vtcOverlay;\r\n#endif\r\n\r\n#ifdef SCREEN_SIZE_PERSPECTIVE /* debug only */\r\n\r\n  uniform vec4 screenSizePerspective;\r\n\r\n  varying float screenSizeDistanceToCamera;\r\n  varying float screenSizeCosAngle;\r\n\r\n#endif\r\n\r\n$applySkirts\r\n\r\n  void main(void) {\r\n    vpos \x3d $position;\r\n\r\n#ifdef SPHERICAL\r\n    vnormal \x3d normalize(vpos + origin);\r\n#else\r\n    vnormal \x3d vec3(0, 0, 1); // WARNING: up-axis dependent code\r\n#endif\r\n\r\n  vec2 uv \x3d $uv0;\r\n  vpos \x3d applySkirts(uv, vpos, vnormal);\r\n\r\n#ifdef ATMOSPHERE\r\n    wpos \x3d (view * vec4(vpos, 1.0)).xyz;\r\n    wnormal \x3d (viewNormal * vec4(normalize(vpos+origin), 1.0)).xyz;\r\n    wlight \x3d (view  * vec4(lightDirection, 1.0)).xyz;\r\n#endif\r\n\r\n#if defined(WIREFRAME) || defined(TILE_BORDERS)\r\n    vuv \x3d uv;\r\n#endif\r\n\r\n#ifdef SCREEN_SIZE_PERSPECTIVE /* debug only */\r\n\r\n    vec3 viewPos \x3d (view * vec4(vpos, 1.0)).xyz;\r\n\r\n    screenSizeDistanceToCamera \x3d length(viewPos);\r\n\r\n    vec3 viewSpaceNormal \x3d (viewNormal * vec4(normalize(vpos + origin), 1.0)).xyz;\r\n    screenSizeCosAngle \x3d abs(viewSpaceNormal.z);\r\n\r\n#endif\r\n\r\n    gl_Position \x3d proj * view * vec4(vpos, 1.0);\r\n\r\n#ifdef RECEIVE_SHADOWS\r\n    // Shadowmap\'s cascading index used to be based on \'1.0 / gl_FragCoord.w\'\r\n    // (i.e. the perspective interpolation of \'gl_Position.w\'). Precision\r\n    // issues on iPad/iPhone with the \'w\' component require the depth to be\r\n    // passed as varying to properly drive the cascading shadow map index.\r\n    linearDepth \x3d gl_Position.w;\r\n#endif\r\n\r\n    vtc \x3d uv * texOffsetAndScale.zw + texOffsetAndScale.xy;\r\n\r\n#ifdef OVERLAY\r\n    vtcOverlay \x3d vec4(uv, uv) * overlayTexScale + overlayTexOffset;\r\n#endif\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fsTerrainCommon"\x3e\x3c![CDATA[\r\n  uniform vec3 lightDirection;\r\n  uniform vec3 viewDirection;\r\n  uniform sampler2D depthTex;\r\n  uniform int shadowMapNum;\r\n  uniform vec4 shadowMapDistance;\r\n  uniform mat4 shadowMapMatrix[4];\r\n  uniform float depthHalfPixelSz;\r\n  uniform sampler2D ssaoTex;\r\n  uniform vec4 viewportPixelSz;\r\n  uniform sampler2D tex;\r\n  uniform float opacity;\r\n\r\n  varying vec3 vpos;\r\n  varying vec3 vnormal;\r\n  varying vec2 vtc;\r\n\r\n#if defined(WIREFRAME) || defined(TILE_BORDERS)\r\n  varying vec2 vuv;\r\n#endif\r\n\r\n#ifdef ATMOSPHERE\r\n  varying vec3 wpos;\r\n  varying vec3 wview;\r\n  varying vec3 wnormal;\r\n  varying vec3 wlight;\r\n#endif\r\n\r\n  $sceneLightingDefinitions\r\n\r\n#ifdef SCREEN_SIZE_PERSPECTIVE /* debug only */\r\n  $screenSizePerspective\r\n\r\n  uniform vec4 screenSizePerspective;\r\n\r\n  varying float screenSizeDistanceToCamera;\r\n  varying float screenSizeCosAngle;\r\n#endif\r\n\r\n  const vec3 ambient \x3d vec3(0.2,0.2,0.2);\r\n  const vec3 diffuse \x3d vec3(0.8,0.8,0.8);\r\n  const float diffuseHardness \x3d 2.5;\r\n\r\n#ifdef OVERLAY\r\n  uniform sampler2D overlay0Tex;\r\n  uniform sampler2D overlay1Tex;\r\n  uniform float overlayOpacity;\r\n  varying vec4 vtcOverlay;\r\n\r\n  $getOverlayColor\r\n#endif\r\n\r\n#ifdef RECEIVE_SHADOWS\r\n\tvarying float linearDepth;\r\n\t$evalShadow\r\n#endif\r\n\r\n  float lum(vec3 c) {\r\n    float max \x3d max(max(c.r, c.g), c.b);\r\n    float min \x3d min(min(c.r, c.g), c.b);\r\n    return (min + max) * 0.5;\r\n  }\r\n\r\n#ifdef ATMOSPHERE\r\n  vec3 atmosphere(vec3 lightPos, vec3 normal, vec3 view) {\r\n    vec3 surfaceColor   \x3d vec3(0.0);\r\n    vec3 fuzzySpecColor \x3d vec3(1.0);\r\n    vec3 subColor       \x3d vec3(0.0);\r\n    float rollOff       \x3d 1.0;\r\n\r\n    vec3 Ln \x3d normalize(lightPos);\r\n    vec3 Nn \x3d normalize(normal);\r\n    vec3 Hn \x3d normalize(view + Ln);\r\n\r\n    float ldn \x3d dot(Ln, Nn);\r\n    float diffComp \x3d max(0.0, ldn);\r\n    float vdn \x3d 1.0 - dot(view, Nn);\r\n    float ndv \x3d dot(view, Ln);\r\n\r\n    vec3 diffContrib \x3d surfaceColor * diffComp;\r\n    float subLamb \x3d max(0.0, smoothstep(-rollOff, 1.0, ldn) - smoothstep(0.0, 1.0, ldn));\r\n\r\n    vec3 subContrib \x3d subLamb * subColor;\r\n    vec3 vecColor \x3d vec3(vdn);\r\n\r\n    vec3 diffuseContrib \x3d (subContrib + diffContrib);\r\n    vec3 specularContrib \x3d (vecColor * fuzzySpecColor);\r\n\r\n    return (diffContrib + specularContrib) * rollOff;\r\n  }\r\n#endif\r\n\r\n  void main() {\r\n    vec3 a \x3d ambient;\r\n\r\n    float shadow \x3d 0.0;\r\n#ifdef RECEIVE_SHADOWS\r\n    shadow \x3d evalShadow(vpos, linearDepth, depthTex, shadowMapNum, shadowMapDistance, shadowMapMatrix, depthHalfPixelSz);\r\n#endif\r\n    float vndl \x3d dot(normalize(vnormal), lightDirection);\r\n    float k \x3d smoothstep(0.0, 1.0, clamp(vndl*diffuseHardness, 0.0, 1.0));\r\n    vec3 d \x3d (1.0 - shadow/1.8) * diffuse * k;\r\n\r\n    float ssao \x3d viewportPixelSz.w \x3c .0 ? 1.0 : texture2D(ssaoTex, (gl_FragCoord.xy - viewportPixelSz.xy) * viewportPixelSz.zw).a;\r\n    vec4 tileColor \x3d texture2D(tex, vtc) * opacity;\r\n\r\n#ifdef OVERLAY\r\n    vec4 overlayColor \x3d getOverlayColor(vtcOverlay, overlayOpacity);\r\n\r\n    // tileColor and overlayTexCols have pre-multiplied alpha\r\n    tileColor \x3d tileColor * (1.0 - overlayColor.a) + overlayColor;\r\n#endif\r\n\r\n    vec3 atm \x3d vec3(0.0);\r\n#ifdef ATMOSPHERE\r\n    float ndotl \x3d max(0.0, min(1.0, vndl));\r\n    atm \x3d atmosphere(wlight, wnormal, -viewDirection);\r\n    atm *\x3d max(0.0, min(1.0, (1.0-lum(tileColor.rgb)*1.5))); //avoid atmosphere on bright base maps\r\n    atm *\x3d max(0.0, min(1.0, ndotl*2.0)); // avoid atmosphere on dark side of the globe\r\n    atm *\x3d tileColor.a; // premultiply with tile alpha\r\n#endif\r\n\r\n    vec3 albedo \x3d atm + tileColor.rgb;\r\n    vec3 normal \x3d normalize(vnormal);\r\n\r\n    // heuristic shading function used in the old terrain, now used to add ambient lighting\r\n    float additionalAmbientScale \x3d smoothstep(0.0, 1.0, clamp(vndl*2.5, 0.0, 1.0));\r\n\t\tvec3 additionalLight \x3d ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\r\n\r\n    gl_FragColor \x3d vec4(evaluateSceneLighting(normal, albedo, shadow, 1.0 - ssao, additionalLight), tileColor.a);\r\n\r\n#ifdef SCREEN_SIZE_PERSPECTIVE /* debug only */\r\n    // This is only used for debug rendering the screenSize perspective\r\n\r\n    float perspectiveScale \x3d screenSizePerspectiveScaleFloat(1.0, screenSizeCosAngle, screenSizeDistanceToCamera, screenSizePerspective);\r\n\r\n    if (perspectiveScale \x3c\x3d 0.25) {\r\n      gl_FragColor \x3d mix(gl_FragColor, vec4(1, 0, 0, 1), perspectiveScale * 4.0);\r\n    }\r\n    else if (perspectiveScale \x3c\x3d 0.5) {\r\n      gl_FragColor \x3d mix(gl_FragColor, vec4(0, 0, 1, 1), (perspectiveScale - 0.25) * 4.0);\r\n    }\r\n    else if (perspectiveScale \x3e\x3d 0.99) {\r\n      gl_FragColor \x3d mix(gl_FragColor, vec4(0, 1, 0, 1), 0.2);\r\n    }\r\n    else {\r\n      gl_FragColor \x3d mix(gl_FragColor, vec4(1, 0, 1, 1), (perspectiveScale - 0.5) * 2.0);\r\n    }\r\n\r\n#endif\r\n\r\n  // closing } is missing here, it\'s in the shaders using this snippet below\r\n\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fsTerrainWireframe"\x3e\x3c![CDATA[\r\n  $enableRequiredExtensions\r\n  $fsprecisionf\r\n\r\n  struct WireframeSettings {\r\n    float width;\r\n    float falloff;\r\n    float subdivision;\r\n    vec4 color;\r\n    float wireOpacity;\r\n    float surfaceOpacity;\r\n  };\r\n\r\n  uniform WireframeSettings wireframe;\r\n\r\n    $fsTerrainCommon\r\n\r\n    vec2 vuvScaled \x3d vuv * wireframe.subdivision;\r\n    vec2 vuvMod \x3d fract(vuvScaled);\r\n\r\n    vec2 dVuv \x3d fwidth(vuvScaled);\r\n    dVuv \x3d max(vec2(0.00001), dVuv); // workaround against flickering skirts, see #10245\r\n\r\n    vec2 edgeFactors \x3d smoothstep((wireframe.width - wireframe.falloff) * dVuv,\r\n                                  wireframe.width * dVuv, min(vuvMod, 1.0 - vuvMod));\r\n\r\n    float edgeFactor \x3d 1.0 - min(edgeFactors.x, edgeFactors.y);\r\n\r\n#ifdef WIREFRAME\r\n    vec3 wireframeColor \x3d mix(gl_FragColor.rgb, wireframe.color.rgb, edgeFactor * wireframe.color.a);\r\n    float wireframeAlpha \x3d mix(wireframe.surfaceOpacity, wireframe.wireOpacity, edgeFactor);\r\n    gl_FragColor \x3d vec4(wireframeColor * wireframeAlpha, wireframeAlpha * gl_FragColor.a);\r\n#endif\r\n\r\n\r\n#ifdef TILE_BORDERS\r\n    dVuv \x3d fwidth(vuv);\r\n    edgeFactors \x3d smoothstep((wireframe.width - wireframe.falloff) * dVuv,\r\n                              wireframe.width * dVuv, min(vuv, 1.0 - vuv));\r\n    edgeFactor \x3d 1.0 - min(edgeFactors.x, edgeFactors.y);\r\n\r\n    gl_FragColor \x3d mix(gl_FragColor, vec4(1.0, 0.0, 0.0, 1.0), edgeFactor);\r\n#endif\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fsTerrain"\x3e\x3c![CDATA[\r\n    $fsprecisionf\r\n    $fsTerrainCommon\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"vsTerrainNormal"\x3e\x3c![CDATA[\r\n  $vsprecisionf\r\n\r\n  uniform vec3 origin;\r\n  uniform mat4 proj;\r\n  uniform mat4 view;\r\n  uniform mat4 viewNormal;\r\n  attribute vec3 $position;\r\n  attribute vec2 $uv0;\r\n  varying vec3 vnormal;\r\n\r\n$applySkirts\r\n\r\n  void main(void) {\r\n#ifdef SPHERICAL\r\n    vec4 normal \x3d vec4(normalize($position + origin), 1.0);\r\n#else\r\n    vec4 normal \x3d vec4(0.0, 0.0, 1.0, 1.0);\r\n#endif\r\n\r\n    vec2 uv \x3d $uv0;\r\n    vec3 vpos \x3d applySkirts(uv, $position, normal.xyz);\r\n\r\n    gl_Position \x3d proj * view * vec4(vpos, 1.0);\r\n    vnormal \x3d normalize((viewNormal * normal).xyz);\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"vsTerrainDepth"\x3e\x3c![CDATA[\r\n  $vsprecisionf\r\n\r\n  uniform vec3 origin;\r\n  uniform mat4 proj;\r\n  uniform mat4 view;\r\n  uniform vec2 nearFar;\r\n  attribute vec3 $position;\r\n  attribute vec2 $uv0;\r\n  varying float depth;\r\n\r\n$applySkirts\r\n\r\n  void main(void) {\r\n#ifdef SPHERICAL\r\n    vec3 normal \x3d normalize($position + origin);\r\n#else\r\n    vec3 normal \x3d vec3(0.0, 0.0, 1.0);\r\n#endif\r\n\r\n    vec2 uv \x3d $uv0;\r\n    vec3 vpos \x3d applySkirts(uv, $position, normal.xyz);\r\n\r\n    vec4 eye \x3d view * vec4(vpos, 1.0);\r\n    gl_Position \x3d proj * eye;\r\n    depth \x3d (-eye.z - nearFar[0]) / (nearFar[1] - nearFar[0]) ;\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"vsTerrainHighlight"\x3e\x3c![CDATA[\r\n  $vsprecisionf\r\n\r\n  uniform vec3 origin;\r\n  uniform mat4 proj;\r\n  uniform mat4 view;\r\n  uniform vec4 overlayTexScale;\r\n  uniform vec4 overlayTexOffset;\r\n\r\n  attribute vec3 $position;\r\n  attribute vec2 $uv0;\r\n\r\n  varying vec4 vtcOverlay;\r\n\r\n$applySkirts\r\n\r\n  void main() {\r\n    #ifdef SPHERICAL\r\n      vec3 vnormal \x3d normalize($position + origin);\r\n    #else\r\n      vec3 vnormal \x3d vec3(0, 0, 1); // WARNING: up-axis dependent code\r\n    #endif\r\n\r\n    vec2 uv \x3d $uv0;\r\n    vec3 vpos \x3d applySkirts(uv, $position, vnormal);\r\n\r\n    vtcOverlay \x3d vec4(uv, uv) * overlayTexScale + overlayTexOffset;\r\n\r\n    gl_Position \x3d proj * view * vec4(vpos, 1.0);\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fsTerrainHighlight"\x3e\x3c![CDATA[\r\n  $fsprecisionf\r\n\r\n  uniform sampler2D overlay0Tex;\r\n  uniform sampler2D overlay1Tex;\r\n  uniform float overlayOpacity;\r\n\r\n  uniform sampler2D depthTex;\r\n  uniform vec4 highlightViewportPixelSz;\r\n\r\n  varying vec4 vtcOverlay;\r\n\r\n  $getOverlayColor\r\n\r\n  void main() {\r\n    vec4 overlayColor \x3d getOverlayColor(vtcOverlay, overlayOpacity);\r\n\r\n    if (overlayColor.a \x3d\x3d 0.0) {\r\n      // Here we have to write black, instead of discarding the fragment in order to overwrite\r\n      // the highlights which might have been written by skirts of other tiles.\r\n      // As a consequence skirts are not visible, but terrain overwrites draped highlights.\r\n      gl_FragColor \x3d vec4(0,0,0,0);\r\n      return;\r\n    }\r\n\r\n    $highlightWrite\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3c/snippets\x3e\r\n'}});
define("require exports ../../../core/tsSupport/extendsHelper dojo/text!./TerrainMaterial.xml ../../../Color ../../../core/ObjectPool ../../../core/PooledArray ../../../core/promiseUtils ../../../geometry/support/aaBoundingBox ../lib/glMatrix ../support/imageUtils ./ResourceCounter ./TerrainConst ./TileGeometryFactory ./TileRenderData ./TileRenderer ./tileUtils ../webgl-engine/lib/DefaultVertexAttributeLocations ../webgl-engine/lib/DefaultVertexBufferLayouts ../webgl-engine/lib/glUtil3D ../webgl-engine/lib/RenderPass ../webgl-engine/lib/RenderSlot ../webgl-engine/lib/screenSizePerspectiveUtils ../webgl-engine/lib/ShaderVariations ../webgl-engine/lib/tracer ../webgl-engine/lib/Util ../webgl-engine/materials/internal/MaterialUtil ../../webgl/BufferObject ../../webgl/Util ../../webgl/VertexArrayObject".split(" "),
function(J,ra,sa,V,W,K,B,D,E,k,X,Y,L,Z,aa,ba,y,ca,da,ea,n,M,fa,C,F,ga,z,N,O,ha){function P(b){return function(a,d){a=a.screenDepth;d=d.screenDepth;return a<d?-b:a>d?b:0}}function ia(b){var a=P(b);return function(d,f){return 0===d.tiles.length?-b:0===f.tiles.length?b:a(d.tiles.data[0],f.tiles.data[0])}}var ja=ga.assert,ka=k.mat4d.identity(),Q=M.OPAQUE_TERRAIN,R=M.TRANSPARENT_TERRAIN,S=k.vec3d.create(),G=k.vec2d.create(),H=E.create(),r=k.vec4d.create(),A=k.vec4d.create(),T=k.vec4d.create(),la=function(){return function(){this.extent=
k.vec4d.create();this.maxLevel=this.minLevel=0;this.callback=null}}();J=function(){function b(a,d){this.initialized=!1;this.rctx=null;this.renderDataPool=new K(aa.TileRenderData);this.perOriginTileData=new B({initialSize:10,allocator:function(){return{root:null,origin:null,tiles:new B({initialSize:300})}}});this.perOriginTileDataDirty=!0;this.tileIterator=new y.IteratorPreorder;this.highestVisibleLODTile=null;this.visible=!0;this.debugScreenSizePerspective=!1;this.wireframe=z.copyParameters(ma);this._opaque=
!0;this._skirtScale=1;this._cullBackFaces=this._disableRendering=this._drawBorders=!1;this._renderOrder=1;this._velvetOverground=!0;this._hasOverlays=!1;this.castShadows=!0;this.receiveShadows=!1;this.backgroundPromise=this.tileRenderer=this.emptyTex=null;this.tileBackgroundInitialized=!1;this.stencilEnabledLayerExtents=[];this.numOriginsRendered=this.numTilesCulled=this.numTilesRendered=this.numTrianglesRendered=0;this.resourceCounter=new Y;this.loaded=this.clippingExtent=null;this._loaded=!1;this.needsRender=
!0;this.needsHighlight=this.didRender=!1;this.visibleScaleRangeQueries=new B({initialSize:10});this.visibleScaleRangeQueriesInvPtr=0;this.visibleScaleRangeQueryQueue=new B({initialSize:30});this.visibleScaleRangeQueryPool=new K(la,!1);this.manifold=a;this.tileSize=d||256}b.prototype.destroy=function(a){this.uninstall(a);this.backgroundPromise&&(this.backgroundPromise.cancel(),this.backgroundPromise=null)};b.prototype.install=function(a){a.addExternalRenderer([Q,R],this);this.drapedRenderer=a.getDrapedTextureRenderer()};
b.prototype.uninstall=function(a){a.removeExternalRenderer(this)};Object.defineProperty(b.prototype,"disableRendering",{set:function(a){this._disableRendering=!!a;this.setNeedsRender()},enumerable:!0,configurable:!0});Object.defineProperty(b.prototype,"opaque",{set:function(a){this._opaque=a;this.setNeedsRender()},enumerable:!0,configurable:!0});Object.defineProperty(b.prototype,"skirtScale",{set:function(a){this._skirtScale=a;this.setNeedsRender()},enumerable:!0,configurable:!0});Object.defineProperty(b.prototype,
"drawBorders",{set:function(a){this._drawBorders!==a&&(this._drawBorders=a,this._updatePrograms())},enumerable:!0,configurable:!0});Object.defineProperty(b.prototype,"cullBackFaces",{set:function(a){this._cullBackFaces=a;this.setNeedsRender()},enumerable:!0,configurable:!0});Object.defineProperty(b.prototype,"renderOrder",{set:function(a){this._renderOrder=a;this.setNeedsRender()},enumerable:!0,configurable:!0});Object.defineProperty(b.prototype,"velvetOverground",{set:function(a){this._velvetOverground!==
a&&(this._velvetOverground=a,this._updatePrograms())},enumerable:!0,configurable:!0});b.prototype.setRootTiles=function(a){this.rootTiles=a;this.setNeedsRender()};b.prototype.setNeedsHighlight=function(a){this.needsHighlight=a;this.setNeedsRender()};b.prototype.setStencilEnabledLayerExtents=function(a){this.stencilEnabledLayerExtents=a;this.setNeedsRender()};b.prototype.setTileSize=function(a){this.tileSize=a;this.tileRenderer&&(this.tileRenderer.tileSize=a);this.setNeedsRender()};b.prototype.loadTile=
function(a){ja(null===a.renderData);a.renderData=this.renderDataPool.acquire();a.renderData.init();var d=this.getLocalOriginOfTile(a);a.createGeometry(a.renderData.updateGeometryState(a),d,"debug"===this.wireframe.mode);a.renderData.localOrigin=d;this._updateTileGeometryBuffers(a);this.tileBackgroundInitialized&&this.tileRenderer.updateTileTexture(a)};b.prototype.queryVisibleLevelRange=function(a,d,f,c){var e=this.visibleScaleRangeQueryPool.acquire();k.vec4d.set(a,e.extent);e.minLevel=d?d:-Number.MAX_VALUE;
e.maxLevel=null!=f?f:Number.MAX_VALUE;e.callback=c;this.visibleScaleRangeQueryQueue.push(e);this.setNeedsRender()};b.prototype.updateTileTexture=function(a){this.tileRenderer&&this.tileBackgroundInitialized&&this.tileRenderer.updateTileTexture(a)};b.prototype.updateTileGeometryNeedsUpdate=function(a){return a.renderData.updateGeometryState(a).needsUpdate};b.prototype._updateTileGeometry=function(a){for(var d=a.renderData.geometryState,f=a.layerInfo[L.LayerClass.ELEVATION],c=0;c<f.length;c++)f[c].pendingUpdates&=
~L.TileUpdateTypes.UPDATE_GEOMETRY;return d.needsUpdate?(a.renderData.vao&&this._releaseTileGeometry(a),a.createGeometry(d,a.renderData.localOrigin,"debug"===this.wireframe.mode),this._updateTileGeometryBuffers(a),!0):!1};b.prototype.updateTileGeometry=function(a){a.renderData.updateGeometryState(a);return this._updateTileGeometry(a)};b.prototype.unloadTile=function(a){this._releaseTileGeometry(a);a.renderData.texture&&a.renderData.texture.dispose();this.renderDataPool.release(a.renderData);a.renderData=
null;a.updateMemoryUsed()};b.prototype.getLocalOriginOfTile=function(a){if(10<=a.lij[0]){for(;7<a.lij[0];)a=a.parent;return a.centerAtSeaLevel}if("spherical"===this.manifold)return S;for(;a.parent;)a=a.parent;return a.centerAtSeaLevel};b.prototype.setVisibility=function(a){this.visible=a;this.setNeedsRender()};b.prototype.getStats=function(){return{numTilesRendered:this.numTilesRendered,numTilesCulled:this.numTilesCulled,numTrianglesRendered:this.numTrianglesRendered,numOriginsRendered:this.numOriginsRendered}};
b.prototype.getWireframeEnabled=function(){return"shader"===this.wireframe.mode};b.prototype.setDebugScreenSizePerspective=function(a){a!==this.debugScreenSizePerspective&&(this.debugScreenSizePerspective=a,this._updatePrograms())};b.prototype.setWireframe=function(a){var d=this;if(!1===a||!0===a)a={mode:a?"shader":"none"};var f=this.wireframe;if(void 0!==a.mode&&f.mode!==a.mode){var c="debug"===f.mode,e="debug"===a.mode;f.mode=a.mode;this._updatePrograms();c!==e&&this.rootTiles&&y.traverseTilesPreorder(this.rootTiles,
function(a){a.renderData&&(a.renderData.vao&&d._releaseTileGeometry(a),a.createGeometry(a.renderData.updateGeometryState(a),a.renderData.localOrigin,e),d._updateTileGeometryBuffers(a))})}for(var b in a)f.hasOwnProperty(b)&&(f[b]=a[b]),this.setNeedsRender();f.resolution&&(f.resolution=Math.min(f.resolution,this.tileSize),f.resolution=1<<Math.round(Math.log(f.resolution)/Math.LN2))};b.prototype.setNeedsRender=function(){this.needsRender=!0;this.didRender=!1;this.perOriginTileDataDirty=!0};b.prototype.resetNeedsRender=
function(){this.didRender&&(this.needsRender=0!==this.visibleScaleRangeQueryQueue.length,this.didRender=!1)};b.prototype.isOpaque=function(){var a=this.wireframe,a="shader"===a.mode&&(1>a.wireOpacity||1>a.surfaceOpacity);return this._opaque&&!a};b.prototype.updateTileBackground=function(a){this.backgroundPromise&&this.backgroundPromise.cancel();this.backgroundPromise="string"===typeof a?X.requestImage(a).catch(function(){return null}):null!=a?D.resolve(W.toUnitRGBA(a)):D.resolve(null);this._renderTileBackground()};
b.prototype.initializeRenderContext=function(a){var d=this,f=this.rctx=a.rctx,c=function(a){D.when(a).then(function(){d.initialized=!0;d.setNeedsRender()}).catch(c)};c(this._renderTileBackground());var e=a.shaderSnippets;a=a.programRep;e.vsTerrain||e._parse(V);var b=new C("terrain",["vsTerrain","fsTerrain"],null,a,e,f);b.addDefine("Spherical","SPHERICAL");b.addDefine("Overlay","OVERLAY");b.addDefine("Atmosphere","ATMOSPHERE");b.addDefine("Wireframe","WIREFRAME");b.addDefine("TileBorders","TILE_BORDERS");
b.addBinaryShaderSnippetSuffix("Wireframe","Wireframe",[!1,!0]);b.addDefine("ReceiveShadows","RECEIVE_SHADOWS");b.addDefine("ScreenSizePerspective","SCREEN_SIZE_PERSPECTIVE");var h=new C("terrainNormal",["vsTerrainNormal","fsNormal"],null,a,e,f);h.addDefine("Spherical","SPHERICAL");h.addDefine("AlphaZero","ALPHA_ZERO");var k=new C("terrainDepth",["vsTerrainDepth","fsDepth"],null,a,e,f);k.addDefine("Spherical","SPHERICAL");k.addDefine("ShadowMap","BIAS_SHADOWMAP");e=new C("terrainHighlight",["vsTerrainHighlight",
"fsTerrainHighlight"],null,a,e,f);e.addDefine("Spherical","SPHERICAL");this.programs={color:null,normal:null,depth:null,depthShadowMap:null,highlight:null};this.programVariations={color:b,normal:h,depth:k,highlight:e};this._updatePrograms();this.tileRenderer=new ba(f,this.tileSize,a,this.resourceCounter,this.setNeedsRender.bind(this));this._renderTileBackground();this.emptyTex=ea.createEmptyTexture(f)};b.prototype.uninitializeRenderContext=function(a){null!=this.emptyTex&&(this.emptyTex.dispose(),
this.emptyTex=null);this.tileRenderer&&(this.tileRenderer.dispose(),this.tileRenderer=null)};b.prototype.render=function(a){var d=a.rctx,f=d.gl;if(!this.initialized||this._disableRendering||!this.visible||!this.rootTiles||!this.tileBackgroundInitialized)return!1;var c=this.isOpaque()?Q:R;if(a.slot!==c)return!1;F.trace("# BEGIN RENDER TERRAIN");c=a.pass;d.setFaceCullingEnabled(this._cullBackFaces);var b=1===a.lightingData.helper.globalFactor;c===n.MATERIAL?this._renderMaterialPass(a,this._updatePerOriginTileData()):
c===n.MATERIAL_DEPTH_SHADOWMAP&&this.castShadows&&b?this._renderDepthPass(a,this.programs.depthShadowMap,this._updatePerOriginTileData()):c===n.MATERIAL_DEPTH?this._renderDepthPass(a,this.programs.depth,this._updatePerOriginTileData()):c===n.MATERIAL_NORMAL?this._renderNormalPass(a,this._updatePerOriginTileData()):c===n.MATERIAL_HIGHLIGHT&&this.needsHighlight&&(this._renderHighlightPass(a,this._updatePerOriginTileData()),d.clear(f.DEPTH_BUFFER_BIT));this._cullBackFaces&&d.setFaceCullingEnabled(!1);
F.trace("# END RENDER TERRAIN");return!0};b.prototype.intersect=function(a,d,f,c){if(this.rootTiles){var b=this.clippingExtent;if((!a.isSelection||this.isOpaque())&&a.enableTerrain){var g=na,h=oa;k.vec3d.subtract(f,d,g);k.vec3d.set3(1/g[0],1/g[1],1/g[2],h);var m=a.getMinResult(),v=a.getMaxResult(),p=this.tileIterator;p.reset(this.rootTiles);c=function(){var c=p.next();if(null===c.renderData)return"continue";if(a.enableInvisibleTerrain){if(!c.visible&&b&&!c.intersectsExtent(b))return"continue"}else if(!c.visible)return"continue";
var e=c.renderData,l=e.geometryInfo,q=e.localOrigin,u=pa,n=qa;k.vec3d.subtract(d,q,u);k.vec3d.subtract(f,q,n);var x=-U._skirtScale*e.geometryInfo.skirtLength;0!==x&&(e=c.tileUp,E.offset(l.boundingBox,x*e[0],x*e[1],x*e[2],H),E.expandWithBuffer(H,l.boundingBox,0,2));if(!z.intersectAabbInvDir(0!==x?H:l.boundingBox,u,h,a.tolerance))return"continue";var e=function(d,f,b){if(0<=d&&(a.enableBackfacesTerrain||0>k.vec3d.dot(f,g))){b=void 0;if(void 0===m.dist||d<m.dist)b=y.lij2str(c.lij[0],c.lij[1],c.lij[2]),
m.set(void 0,b,d,f,void 0),m.setIntersector("TerrainRenderer");if(void 0===v.dist||d>v.dist)b=y.lij2str(c.lij[0],c.lij[1],c.lij[2]),v.set(void 0,b,d,f,void 0),v.setIntersector("TerrainRenderer")}},q=l.indices,r={data:l.vertexAttributes,size:3,offsetIdx:0,strideIdx:5},l=l.numWithoutSkirtIndices/3;z.intersectTriangles(u,n,0,l,q,r,null,e);0!==x&&y.intersectSkirts(u,n,l,q.length/3,q,r,null,"spherical"===U.manifold?function(a){return k.vec3d.scale(a,x/k.vec3d.length(a))}:function(a){return k.vec3d.set3(0,
0,x,a)},e)};for(var U=this;!p.done;)c()}}};b.prototype._renderTileBackground=function(){var a=this;if(this.rctx&&this.backgroundPromise&&this.tileRenderer)return this.backgroundPromise.then(function(d){a.tileRenderer&&(a.tileBackgroundInitialized=!0,a.tileRenderer.setBackground(d),a.rootTiles&&y.traverseTilesPreorder(a.rootTiles,function(d){a.tileRenderer.updateTileTexture(d)}))})};b.prototype._updatePrograms=function(){var a="spherical"===this.manifold,d="shader"===this.wireframe.mode;this.programs.color=
this.programVariations.color.getProgram([a,this._hasOverlays,a&&this._velvetOverground,d,this._drawBorders,d||this._drawBorders,this.receiveShadows,this.debugScreenSizePerspective]);this.programs.normal=this.programVariations.normal.getProgram([a,!0]);this.programs.depth=this.programVariations.depth.getProgram([a,!1]);this.programs.depthShadowMap=this.programVariations.depth.getProgram([a,!0]);this.programs.highlight=this.programVariations.highlight.getProgram([a]);this.setNeedsRender()};b.prototype._renderMaterialPass=
function(a,d){var b=this,c=a.shadowMap&&a.shadowMap.enabled,e=a.rctx;this.receiveShadows!==c&&(this.receiveShadows=c,this._updatePrograms());c=!this.drapedRenderer.isEmpty();c!==this._hasOverlays&&(this._hasOverlays=c,this._updatePrograms());c=a.camera;e.setDepthTestEnabled(!0);var g=this.wireframe,h=this.programs.color;e.bindProgram(h);if("shader"===g.mode||this._drawBorders)h.setUniform1f("wireframe.width",this.wireframe.width),h.setUniform1f("wireframe.falloff",Math.min(g.width,g.falloff)),h.setUniform1f("wireframe.wireOpacity",
g.wireOpacity),h.setUniform1f("wireframe.surfaceOpacity",g.surfaceOpacity),h.setUniform4fv("wireframe.color",g.color);a.shadowMap&&a.shadowMap.bind(h);a.ssaoHelper&&a.ssaoHelper.setUniforms(h);h.setUniform1i("tex",0);h.setUniform1i("overlay0Tex",1);h.setUniform1i("overlay1Tex",2);h.setUniformMatrix4fv("viewNormal",c.viewInverseTransposeMatrix);h.setUniformMatrix4fv("proj",c.projectionMatrix);a.lightingData.helper.setUniforms(h,!0);e=c.viewMatrix;k.vec3d.set3(e[12],e[13],e[14],I);k.vec3d.normalize(I);
h.setUniform3fv("viewDirection",I);this.numOriginsRendered=this.numTrianglesRendered=this.numTilesCulled=this.numTilesRendered=0;this._prepareScaleRangeQueries();this.isOpaque()?this._renderTiles(a,h,d):a.offscreenRenderingHelper.renderToTargets(function(){return b._renderTiles(a,h,d)},a.offscreenRenderingHelper.tmpColor,a.offscreenRenderingHelper.mainDepth,[0,0,0,0]);this._processScaleRangeQueries();0<this.numTilesRendered&&!this._loaded&&(this._loaded=!0,this.loaded&&this.loaded())};b.prototype._renderDepthPass=
function(a,d,b){var c=a.rctx,f=a.camera;c.bindProgram(d);c.setBlendingEnabled(!1);c.setDepthTestEnabled(!0);d.setUniformMatrix4fv("model",ka);d.setUniformMatrix4fv("viewNormal",f.viewInverseTransposeMatrix);G[0]=f.near;G[1]=f.far;d.setUniform2fv("nearFar",G);this._renderTilesAuxiliary(a,d,b,!1)};b.prototype._renderNormalPass=function(a,d){var b=a.rctx,c=a.camera,e=this.programs.normal;b.bindProgram(e);b.setBlendingEnabled(!1);b.setDepthTestEnabled(!0);e.setUniformMatrix4fv("viewNormal",c.viewInverseTransposeMatrix);
this._renderTilesAuxiliary(a,e,d,!1)};b.prototype._renderHighlightPass=function(a,d){var b=a.rctx,c=this.programs.highlight;b.bindProgram(c);b.setBlendingEnabled(!1);b.setDepthTestEnabled(!0);var e=a.offscreenRenderingHelper;b.bindTexture(e.depthTexture,3);c.setUniform1i("depthTex",3);c.setUniform4f("highlightViewportPixelSz",0,0,1/e.width,1/e.height);this._renderTilesAuxiliary(a,c,d,!0)};b.prototype._updatePerOriginTileData=function(){var a=this.perOriginTileData;if(!this.perOriginTileDataDirty)return a;
this.highestVisibleLODTile=null;this._renderCollectOrigins();if(0!==this._renderOrder){for(var d=P(this._renderOrder),b=0;b<a.length;b++)this._sortFrontToBack(a.data[b].tiles,d);d=ia(this._renderOrder);this._sortFrontToBack(a,d)}this.perOriginTileDataDirty=!1;return a};b.prototype._renderCollectOrigins=function(){var a=this.perOriginTileData,d=this.rootTiles,b="spherical"===this.manifold;a.clear();for(var c=0;c<d.length;c++){var e=d[c],g=a.pushNew();g.root=e;g.origin=b?S:e.centerAtSeaLevel;g.tiles.clear();
this._renderCollectOriginsForRoot(g)}return!0};b.prototype._renderCollectOriginsForRoot=function(a){var d=this.tileIterator,b=this.perOriginTileData;for(d.reset(a.root);!d.done;){var c=d.next(),e=c.renderData;if(e&&!c.visible)this.numTilesCulled++,d.skip();else{var g=b.back();if(7===c.lij[0]){if(g===a||0!==g.tiles.length)g=b.pushNew(),g.tiles.clear();g.root=c;g.origin=c.centerAtSeaLevel}if(e){10<=c.lij[0]?b.back().tiles.push(c):a.tiles.push(c);if(!this.highestVisibleLODTile||c.vlevel>this.highestVisibleLODTile.vlevel)this.highestVisibleLODTile=
c;d.skip()}}}};b.prototype._sortFrontToBack=function(a,d){a.sort(d)};b.prototype._scaleQueriesForTile=function(a){var d=a.extent;a=a.lij[0];for(var b=0;b<this.visibleScaleRangeQueriesInvPtr;){var c=this.visibleScaleRangeQueries.data[b],e=c.extent;a>=c.minLevel&&a<=c.maxLevel&&e[0]<=d[2]&&e[2]>=d[0]&&e[1]<=d[3]&&e[3]>=d[1]?(this.visibleScaleRangeQueries.swapElements(b,this.visibleScaleRangeQueriesInvPtr-1),this.visibleScaleRangeQueriesInvPtr--):b++}};b.prototype._updateStencilReadStateForTile=function(a,
b){if(a.stencilRenderingHelper&&a.stencilRenderingHelper.enabled){for(var d=this.stencilEnabledLayerExtents,c=!1,e=0;e<d.length;e++)if(b.intersectsExtent(d[e])){c=!0;break}c?a.stencilRenderingHelper.enableStencilRead():a.stencilRenderingHelper.disableStencilRead()}};b.prototype._renderTilesAuxiliary=function(a,b,f,c){var d=a.rctx,g=d.gl,h=a.camera,k=h.viewMatrix;b.setUniformMatrix4fv("proj",h.projectionMatrix);b.setUniform1f("skirtScale",this._skirtScale);c&&(b.setUniform1i("overlay0Tex",1),b.setUniform1i("overlay1Tex",
2));for(h=0;h<f.length;h++){var v=f.data[h];b.setUniform3fv("origin",v.origin);z.bindView(v.origin,k,b);for(var p=0;p<v.tiles.length;p++){var n=v.tiles.data[p],t=n.renderData;c&&(this._bindOverlayTextures(b,t.overlays,!0),b.setUniform1f("overlayOpacity",t.overlayOpacity));this._updateStencilReadStateForTile(a,n);d.bindVAO(t.vao);O.assertCompatibleVertexAttributeLocations(t.vao,b);d.drawElements(g.TRIANGLES,0!==this._skirtScale?t.vao.indexBuffer.size:t.geometryInfo.numWithoutSkirtIndices,t.vao.indexBuffer.indexType,
0)}}d.bindVAO(null);a.stencilRenderingHelper&&a.stencilRenderingHelper.disableStencilRead()};b.prototype._renderTiles=function(a,b,f){var c=a.rctx,d=c.gl,g=a.camera,h=g.viewMatrix;if(this.debugScreenSizePerspective&&this.pointsOfInterest){var m=fa.getSettings("spherical"===this.manifold?"global":"local");m.update({distance:this.pointsOfInterest.centerOnSurfaceFrequent.distance,fovY:g.fovY});z.bindScreenSizePerspective(m,b,"screenSizePerspective")}b.setUniform1f("skirtScale",this._skirtScale);for(g=
0;g<f.length;g++)if(m=f.data[g],b.setUniform3fv("origin",m.origin),z.bindView(m.origin,h,b),a.shadowMap&&a.shadowMap.bindView(b,m.origin),this.numOriginsRendered++,m=m.tiles,0!==m.length){var n="debug"===this.wireframe.mode?d.LINES:d.TRIANGLES,p=this.highestVisibleLODTile,r=void 0,t=void 0;p?(r=p.vlevel,t=this.tileSize/this.wireframe.resolution):(r=16,t=this.tileSize/64);for(p=0;p<m.length;p++){var w=m.data[p],l=w.renderData;this._updateStencilReadStateForTile(a,w);F.trace("# RENDER TILE "+w.lij[0]+
"/"+w.lij[1]+"/"+w.lij[2]+", screenDepth:"+w.screenDepth);var q=l.geometryInfo.uvOffsetAndScale,u=l.texOffsetAndScale;k.vec4d.set4(q[0]*u[2]+u[0],q[1]*u[3]+u[1],q[2]*u[2],q[3]*u[3],T);b.setUniform4fv("texOffsetAndScale",T);c.bindTexture(l.textureReference||l.texture,0);b.setUniform1f("opacity",l.opacity);this._bindOverlayTextures(b,l.overlays,!1);b.setUniform1f("overlayOpacity",l.overlayOpacity);("shader"===this.wireframe.mode||this._drawBorders)&&b.setUniform1f("wireframe.subdivision",t*(1<<r-w.vlevel));
q=0!==this._skirtScale?l.vao.indexBuffer.size:l.geometryInfo.numWithoutSkirtIndices;c.bindVAO(l.vao);O.assertCompatibleVertexAttributeLocations(l.vao,b);c.drawElements(n,q,l.vao.indexBuffer.indexType,0);w.renderOrder=this.numTilesRendered;this.numTilesRendered++;this.numTrianglesRendered+=q/3;this._scaleQueriesForTile(w)}}c.bindVAO(null);a.stencilRenderingHelper&&a.stencilRenderingHelper.disableStencilRead()};b.prototype._bindOverlayTextures=function(a,b,f){for(var c=0;2>c;c++){var d=2*c,g=b[c],h=
f?g.highlightRenderTargetId:g.renderTargetId;h?(h=this.drapedRenderer.getRenderTargetTexture(h),r[d]=g.texOffset[0],r[d+1]=g.texOffset[1],A[d]=g.texScale[0],A[d+1]=g.texScale[1],this.rctx.bindTexture(h,1+c)):(r[d]=0,r[d+1]=0,A[d]=0,A[d+1]=0,this.rctx.bindTexture(this.emptyTex,1+c))}a.setUniform4fv("overlayTexOffset",r);a.setUniform4fv("overlayTexScale",A)};b.prototype._updateTileGeometryBuffers=function(a){var b=this.rctx,f=b.gl;a=a.renderData;var c=a.geometryInfo.indices;a.vao=new ha(b,ca.Default3D,
{geometry:da.Pos3Tex},{geometry:N.createVertex(b,f.STATIC_DRAW,a.geometryInfo.vertexAttributes)},N.createIndex(b,f.STATIC_DRAW,c));this.setNeedsRender()};b.prototype._releaseTileGeometry=function(a){a=a.renderData;a.vao.dispose(!0);a.vao=null;Z.releaseGeometry(a.geometryInfo);this.setNeedsRender()};b.prototype._prepareScaleRangeQueries=function(){for(var a=this.visibleScaleRangeQueries,b=this.visibleScaleRangeQueryQueue;a.length<a.data.length&&0<b.length;){var f=b.pop();a.push(f)}this.visibleScaleRangeQueriesInvPtr=
a.length};b.prototype._processScaleRangeQueries=function(){for(var a=this.visibleScaleRangeQueries,b=this.visibleScaleRangeQueryPool,f=0;f<a.length;f++){var c=a.data[f];b.release(c);c.callback(f>=this.visibleScaleRangeQueriesInvPtr);c.callback=null}a.clear()};return b}();var ma={mode:"none",width:1.5,falloff:1.5,wireOpacity:1,surfaceOpacity:0,color:[1,1,1,0],resolution:64},I=k.vec3d.create(),na=k.vec3d.create(),oa=k.vec3d.create(),pa=k.vec3d.create(),qa=k.vec3d.create();return J});