// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.8/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/environment/materials/SimpleAtmosphereMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3csnippet name\x3d"vsSimpleAtmosphere"\x3e\x3c![CDATA[\r\n  $vsprecisionf\r\n\r\n  uniform mat4 proj;\r\n  uniform mat4 view;\r\n\r\n#ifndef PANORAMIC\r\n  const float TWICEPI \x3d 2.0*3.14159265;\r\n  const float ATMOSPHERE_RIM_SEGMENTS \x3d 128.0;\r\n\r\n  uniform vec3 silCircleCenter;\r\n  uniform vec3 silCircleV1;\r\n  uniform vec3 silCircleV2;\r\n  uniform vec2 texV;\r\n\r\n  uniform float innerScale;  // scale for inner rim\r\n  varying float innerFactor; // 0: outer atmosphere, 1: inner atmosphere\r\n#endif\r\n\r\n  uniform vec3 lightDirection;\r\n\r\n  attribute vec3 $position;\r\n  varying vec2 vtc;\r\n  varying float falloff;\r\n\r\n  void main(void) {\r\n\r\n#ifdef PANORAMIC\r\n\r\n    vec3 pos \x3d $position;\r\n    float ndotl \x3d lightDirection.z;\r\n    vtc \x3d vec2(0, $position.z+0.05);\r\n\r\n#else\r\n\r\n    innerFactor \x3d clamp(-$position.z, 0.0, 1.0);\r\n    float scale \x3d $position.y * (1.0 + innerFactor * innerScale);\r\n    float phi \x3d $position.x * (TWICEPI / ATMOSPHERE_RIM_SEGMENTS) + 1.0;\r\n    vec3 pos \x3d  (silCircleCenter + sin(phi) * silCircleV1 + cos(phi) * silCircleV2) * scale;\r\n    float ndotl \x3d dot(normalize($position.y \x3e 0.0 ? pos: silCircleCenter), lightDirection);\r\n\r\n    vtc.x \x3d $position.x / ATMOSPHERE_RIM_SEGMENTS;\r\n    vtc.y \x3d texV.x * (1.0 - $position.z) + texV.y * $position.z;\r\n\r\n#endif\r\n\r\n    falloff \x3d max(0.0, smoothstep(-1.0, 0.8, 2.0 * ndotl));\r\n\r\n    gl_Position \x3d proj * view * vec4(pos, 1.0);\r\n    gl_Position.z \x3d gl_Position.w; // project atmosphere onto the far plane\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fsSimpleAtmosphere"\x3e\x3c![CDATA[\r\n  $fsprecisionf\r\n\r\n  uniform sampler2D tex;\r\n\r\n  varying vec2 vtc;\r\n  varying float falloff;\r\n\r\n#ifndef PANORAMIC\r\n  uniform float altitudeFade;\r\n  varying float innerFactor;\r\n#endif\r\n\r\n  void main() {\r\n    vec4 texColor \x3d texture2D(tex, vtc);\r\n\r\n#ifdef PANORAMIC\r\n    gl_FragColor \x3d texColor * falloff;\r\n#else\r\n    vec4 atmosphereColor \x3d texColor * falloff;\r\n    vec4 innerColor \x3d vec4(texColor.rgb * falloff, 1.0 - altitudeFade);\r\n    gl_FragColor \x3d mix(atmosphereColor, innerColor, smoothstep(0.0, 1.0, innerFactor));\r\n#endif\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"vsSimpleAtmosphereFade"\x3e\x3c![CDATA[\r\n  $vsprecisionf\r\n\r\n  attribute vec2 $position;\r\n\r\n  uniform vec3 lightDirection;\r\n  uniform vec3 cameraPosition;\r\n\r\n  uniform float undergroundFadeAlpha;\r\n\r\n  varying vec4 color;\r\n\r\n  void main(void) {\r\n    float ndotl \x3d dot(normalize(cameraPosition), lightDirection);\r\n    float lighting \x3d max(0.0, smoothstep(-1.0, 0.8, 2.0 * ndotl));\r\n\r\n    color \x3d vec4(vec3(lighting), undergroundFadeAlpha);\r\n\r\n    gl_Position \x3d vec4($position.xy, 1.0, 1.0); // on the far plane\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fsSimpleAtmosphereFade"\x3e\x3c![CDATA[\r\n  $fsprecisionf\r\n\r\n  varying vec4 color;\r\n\r\n  void main() {\r\n    gl_FragColor \x3d color;\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3c/snippets\x3e\r\n'}});
define("require exports dojo/text!./materials/SimpleAtmosphereMaterial.xml ../../../core/watchUtils ./atmosphereUtils ./resources/SimpleAtmosphereTexture ../lib/glMatrix ../support/earthUtils ../support/imageUtils ../support/mathUtils ../webgl-engine/lib/DefaultVertexAttributeLocations ../webgl-engine/lib/GeometryRenderer ../webgl-engine/lib/glUtil3D ../webgl-engine/lib/RenderPass ../webgl-engine/lib/RenderSlot ../webgl-engine/lib/Util ../../webgl/Program ../../webgl/Texture ../../webgl/Util".split(" "),
function(r,O,A,B,t,C,g,k,D,E,u,F,G,H,I,l,v,J,K){function w(e,a,b,d,c){var n=g.vec3d.length(e),f=d*Math.sqrt(n*n-d*d)/n,h=c.silCircleV1,k=c.silCircleV2;g.vec3d.scale(e,Math.sqrt(d*d-f*f)/n,c.silCircleCenter);g.vec3d.cross(e,a,h);1>g.vec3d.length2(h)&&g.vec3d.cross(e,b,h);g.vec3d.scale(h,f/g.vec3d.length(h));g.vec3d.cross(h,e,k);g.vec3d.scale(k,f/g.vec3d.length(k));return f}function x(e,a,b,d){g.vec3d.add(d.silCircleCenter,d.silCircleV2,m);g.vec3d.scale(m,y,p);g.mat4d.lookAt(a,m,b,q);l.project(m,q,
e.projectionMatrix,e.viewport);l.project(p,q,e.projectionMatrix,e.viewport);return g.vec3d.dist(m,p)/e.height}var z=-t.INNER_ATMOSPHERE_DEPTH,L=(k.earthRadius+z)/k.earthRadius,M=(k.earthRadius+0)/k.earthRadius,y=(k.earthRadius+3E5)/k.earthRadius,N=E.makePiecewiseLinearFunction([[50,.1015625],[500,.21875],[5E3,.51171875],[5E4,.4140625]]);r=function(){function e(a){this.view=null;this.needsRender=!1;this.didRender=!0;this.slot=I.POSTPROCESSING_ATMOSPHERE_OPAQUE;this._renderData={texV:g.vec2d.create(),
silCircleCenter:g.vec3d.create(),silCircleV1:g.vec3d.create(),silCircleV2:g.vec3d.create(),altitudeFade:0,innerScale:0,undergroundFadeAlpha:0};this._fadeProgram=this._texture=this._program=this._renderer=null;this._fadeVAOCount=0;this._cameraChangeHandle=null;this.view=a}e.prototype.when=function(a){return this._readyPromise.then(a)};e.prototype.initializeRenderContext=function(a){var b=this,d=this._createRibbonGeometryData();this._renderer=new F(d,[{name:"position",count:3,type:5126,offset:0,stride:12,
normalized:!1}],null,a.rctx);this._cameraChangeHandle=B.init(this.view,"state.camera",function(a){return b._update(a)},!0);a.shaderSnippets.vsSimpleAtmosphere||a.shaderSnippets._parse(A);this._program=new v(a.rctx,a.shaderSnippets.vsSimpleAtmosphere,a.shaderSnippets.fsSimpleAtmosphere,u.Default3D);this._fadeProgram=new v(a.rctx,a.shaderSnippets.vsSimpleAtmosphereFade,a.shaderSnippets.fsSimpleAtmosphereFade,u.Default3D);this._fadeVAO=G.createQuadVAO(a.rctx);this._fadeVAOCount=K.vertexCount(this._fadeVAO,
"geometry");this._readyPromise=D.requestImage(C).then(function(c){b._texture=new J(a.rctx,{pixelFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9729,flipped:!0},c);b.needsRender=!0})};e.prototype.uninitializeRenderContext=function(a){this.destroy()};e.prototype.destroy=function(){this._cameraChangeHandle&&(this._cameraChangeHandle.remove(),this._cameraChangeHandle=null);this._texture&&(this._texture.dispose(),this._texture=null);this._program&&(this._program.dispose(),this._program=null);this._fadeProgram&&
(this._fadeProgram.dispose(),this._fadeProgram=null);this._fadeVAO&&(this._fadeVAO.dispose(),this._fadeVAO=null)};e.prototype.render=function(a){if(a.slot!==this.slot||a.pass!==H.MATERIAL||null==this._texture)return!1;var b=a.rctx,d=b.gl,c=this._program;b.setDepthTestEnabled(!0);b.setDepthFunction(d.LEQUAL);b.setBlendingEnabled(!0);b.setDepthWriteEnabled(!1);b.setBlendFunctionSeparate(d.SRC_ALPHA,d.ONE_MINUS_SRC_ALPHA,d.ONE,d.ONE_MINUS_SRC_ALPHA);1>this._renderData.undergroundFadeAlpha&&(b.bindProgram(c),
c.setUniformMatrix4fv("proj",a.camera.projectionMatrix),c.setUniformMatrix4fv("view",a.camera.viewMatrix),c.setUniform3fv("silCircleCenter",this._renderData.silCircleCenter),c.setUniform3fv("silCircleV1",this._renderData.silCircleV1),c.setUniform3fv("silCircleV2",this._renderData.silCircleV2),c.setUniform2fv("texV",this._renderData.texV),b.bindTexture(this._texture,0),c.setUniform1i("tex",0),c.setUniform3fv("lightDirection",a.lightingData.direction),c.setUniform1f("altitudeFade",this._renderData.altitudeFade),
c.setUniform1f("innerScale",this._renderData.innerScale),this._renderer.render(c));0<this._renderData.undergroundFadeAlpha&&(b.bindProgram(this._fadeProgram),this._fadeProgram.setUniform1f("undergroundFadeAlpha",this._renderData.undergroundFadeAlpha),this._fadeProgram.setUniform3fv("lightDirection",a.lightingData.direction),this._fadeProgram.setUniform3fv("cameraPosition",a.camera.eye),b.bindVAO(this._fadeVAO),b.drawArrays(5,0,this._fadeVAOCount));b.setBlendingEnabled(!1);b.setDepthWriteEnabled(!0);
b.setDepthFunction(d.LESS);this.needsRender=!1;return!0};e.prototype._update=function(a){var b=g.vec3d.create(),d=k.earthRadius,c=g.vec3d.length(a.eye),e=c-d;this._renderData.undergroundFadeAlpha=0>e?Math.min(-e/5E3,1):0;var f=d+z,h=d+Math.max(50,e);this._renderData.innerScale=h*h/(Math.sqrt(h*h-d*d)*Math.sqrt(h*h-f*f)+d*f)-1;this._renderData.altitudeFade=t.computeInnerAltitudeFade(e);g.vec3d.scale(a.eye,(d+50)/c,b);w(b,a.center,a.up,d,this._renderData);b=x(a,b,a.up,this._renderData);c=N(e);f=.001953125;
h=0+b*c*1;50<e&&(w(a.eye,a.center,a.up,d,this._renderData),a=x(a,a.eye,a.up,this._renderData),a=l.clamp((a-1.5)/(b-1.5),0,1),f=0+.001953125*a,h=0+1*l.lerp(1,b*c,a));g.vec2d.set2(f,h,this._renderData.texV);this.needsRender=!0};e.prototype._createRibbonGeometryData=function(){var a=new Float32Array(1155),b=new Uint32Array(1920);a[0]=0;a[1]=0;a[2]=-1;for(var d=0;128>d;d++){var c=9*d+3;a[c+0]=d;a[c+1]=L;a[c+2]=-1;a[c+3]=d;a[c+4]=M;a[c+5]=0;a[c+6]=d;a[c+7]=y;a[c+8]=1;var c=3*d+1,e=127===d?1:c+3,f=15*d;
b[f+0]=c;b[f+1]=c+1;b[f+2]=e+1;b[f+3]=e+1;b[f+4]=e;b[f+5]=c;b[f+6]=c+1;b[f+7]=c+2;b[f+8]=e+2;b[f+9]=e+2;b[f+10]=e+1;b[f+11]=c+1;b[f+12]=c;b[f+13]=e;b[f+14]=0}d={};d[l.VertexAttrConstants.POSITION]=b;b={};b[l.VertexAttrConstants.POSITION]={size:3,data:a};return{id:"simpleatmosphereribbon",indices:d,vertexAttr:b,preinterleaved:!1}};return e}();var q=g.mat4d.create(),m=g.vec3d.create(),p=g.vec3d.create();return r});