<?xml version="1.0" encoding="UTF-8"?>

<snippets>

<snippet name="vertexShaderHUD"><![CDATA[
  $vsprecisionf

  $commonAttributesAndUniformsHUD

  uniform float pixelRatio;
  uniform vec2 screenOffset;
  uniform vec2 anchorPos;

#ifdef SCREEN_SIZE_PERSPECTIVE

  uniform vec4 screenSizePerspective;

#endif

#ifdef DEBUG_DRAW_BORDER
  varying vec3 debugBorderCoords;
#endif

  attribute vec2 $uv0;
  attribute vec4 $color;
  attribute vec2 $size;
  attribute vec4 $auxpos2;

  varying vec4 vcolor;

  varying vec2 vtc;
  varying vec2 vsize;

#ifdef BINARY_HIGHLIGHT_OCCLUSION
  varying float voccluded;
#endif

  $vvUniforms

  $alignToPixelCenter
  $alignToPixelOrigin
  $projectPositionHUD
  $vvFunctions

  void main(void) {
    ProjectHUDAux projectAux;
    vec4 posProj = projectPositionHUD(projectAux);

    vec2 inputSize;

#ifdef SCREEN_SIZE_PERSPECTIVE

    inputSize = screenSizePerspectiveScaleVec2($size, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspective);

    vec2 screenOffsetScaled = screenSizePerspectiveScaleVec2(screenOffset, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspectiveAlignment);

#else

    inputSize = $size;

    vec2 screenOffsetScaled = screenOffset;
#endif

#ifdef VV_SIZE
    // only use width (.xx) for proportional scaling
    // (if no width was defined in vv, width
    //  will be a copy of height vv)
    inputSize *= vvGetScale($auxpos2).xx;
#endif

    vec2 combinedSize = inputSize * pixelRatio;
    vec4 quadOffset = vec4(0);

#if defined(OCCL_TEST) || defined(BINARY_HIGHLIGHT_OCCLUSION)
    bool visible = testVisibilityHUD(posProj);
#endif

#ifdef BINARY_HIGHLIGHT_OCCLUSION
  voccluded = visible ? 0.0 : 1.0;
#endif

#ifdef OCCL_TEST
    if (visible) {
#endif
      // UV goes from 0 to 1.99999, where the integer part is used
      // for the normalized vertex coordinates, and the fractional
      // part is used for texture sampling
      vec2 uv01 = floor($uv0);
      vec2 uv = $uv0 - uv01;

      // Displace icon based on anchor position (normalized for size) and
      // absolute screen offset. anchorPos is [-0.5, 0.5]
      quadOffset.xy = ((uv01 - anchorPos) * 2.0 * combinedSize + screenOffsetScaled) / viewport.zw * posProj.w;

#ifdef SIGNED_DISTANCE_FIELD

      // SDF primitives might be scaled so that the SDF texture resolution does
      // not match the resolution of the canvas, but we still want to render
      // outline-only ('cross' and 'x') primitives cleanly. Aligning to a screen
      // pixel border at the geometry center achieves this, since SDF textures
      // always have power of 2 dimensions.
      posProj = alignToPixelOrigin(posProj, viewport.zw) + quadOffset;
#else
      posProj += quadOffset;

      // Aligning vertex positions to the nearest (using 'floor') screen pixel
      // border renders textures with pixel-perfect results. If the texture
      // resolution does not match the canvas resolution then aligning is
      // redundant.
      if (inputSize.x == $size.x) {
        posProj = alignToPixelOrigin(posProj, viewport.zw);
      }
#endif

      gl_Position = posProj;

      vtc = uv;

#ifdef DEBUG_DRAW_BORDER
      debugBorderCoords = vec3(uv01, 1.0 / combinedSize);
#endif

      vsize = inputSize;
#ifdef OCCL_TEST
    } else {
      vtc = vec2(.0);

#ifdef DEBUG_DRAW_BORDER
      debugBorderCoords = vec3(0);
#endif

    }
#endif

    gl_Position = posProj;

#ifdef VV_COLOR
    vcolor = vvGetColor($auxpos2, vvColorValues, vvColorColors);
#else
    vcolor = $color / 255.0;
#endif
  }
]]></snippet>

<snippet name="fragmentShaderHUDBaseVariables"><![CDATA[
  $enableRequiredExtensions
  $fsprecisionf

  uniform sampler2D tex;
  uniform vec4 overrideColor;
  uniform vec4 outlineColor;
  uniform float outlineSize;

  varying vec4 vcolor;

  varying vec2 vtc;
  varying vec2 vsize;

#ifdef BINARY_HIGHLIGHT_OCCLUSION
  varying float voccluded;
#endif

#ifdef DEBUG_DRAW_BORDER
  varying vec3 debugBorderCoords;
#endif
]]></snippet>

<snippet name="fragmentShaderHUDBaseMain"><![CDATA[
  vec4 premultiply(vec4 v) {
    return vec4(v.rgb * v.a, v.a);
  }

  $rgba2float

  void main() {

#ifdef SIGNED_DISTANCE_FIELD
    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
    vec4 fillPixelColor = overrideColor * vcolor;

    // Attempt to sample texel centers to avoid that thin cross outlines
    // disappear with large symbol sizes.
    // see: https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/7058#issuecomment-603041
    const float txSize = 128.0;
    const float texelSize = 1.0 / txSize;
    // Calculate how much we have to add/subtract to/from each texel to reach the size of an onscreen pixel
    vec2 scaleFactor = (vsize - txSize) * texelSize;
    vec2 samplePos = vtc + (vec2(1.0, -1.0) * texelSize) * scaleFactor;

    // Get distance and map it into [-0.5, 0.5]
    float d = rgba2float(texture2D(tex, samplePos)) - 0.5;

    // Distance in output units (i.e. pixels)
    float dist = d * vsize.x;

    // Create smooth transition from the icon into its outline
    fillPixelColor.a *= clamp(0.5 - dist, 0.0, 1.0);

    if (outlineSize > 0.25) {
      vec4 outlinePixelColor = outlineColor;
      float clampedOutlineSize = min(outlineSize, 0.5*vsize.x);

      // Create smooth transition around outline
      outlinePixelColor.a *= clamp(0.5 - (abs(dist) - 0.5*clampedOutlineSize), 0.0, 1.0);

      // perform un-premultiplied over operator (see https://en.wikipedia.org/wiki/Alpha_compositing#Description)
      float compositeAlpha = outlinePixelColor.a + fillPixelColor.a * (1.0 - outlinePixelColor.a);
      vec3 compositeColor = vec3(outlinePixelColor) * outlinePixelColor.a +
        vec3(fillPixelColor) * fillPixelColor.a * (1.0 - outlinePixelColor.a);

      gl_FragColor = vec4(compositeColor, compositeAlpha);
    }
    else {
      gl_FragColor = premultiply(fillPixelColor);
    }

    // visualize SDF:
    // gl_FragColor = vec4(clamp(-dist/vsize.x*2.0, 0.0, 1.0), clamp(dist/vsize.x*2.0, 0.0, 1.0), 0.0, 1.0);
#else

    // HUDMaterial is rendered with a blending mode that assumes a pre-multiplied
    // fragment color. Input textures should already be pre-multiplied and so
    // don't require adjustment, but the override and vertex colors must be
    // modulated by their alpha values.

    gl_FragColor = texture2D(tex, vtc, -0.5) * premultiply(overrideColor * vcolor);

#endif

#ifdef DEBUG_DRAW_BORDER
     float isBorder = float(any(lessThan(debugBorderCoords.xy, vec2(debugBorderCoords.z))) || any(greaterThan(debugBorderCoords.xy, vec2(1.0 - debugBorderCoords.z))));
     gl_FragColor = mix(gl_FragColor, vec4(1, 0, 1, 1), isBorder);
#endif

    if (gl_FragColor.a < 0.1) {
      discard;
    }

]]></snippet>

<snippet name="fragmentShaderHUD"><![CDATA[
$fragmentShaderHUDBaseVariables
$fragmentShaderHUDBaseMain
  }
]]></snippet>

<snippet name="fragmentShaderHUDHighlight"><![CDATA[
$fragmentShaderHUDBaseVariables

  uniform sampler2D depthTex;
  uniform vec4 highlightViewportPixelSz;

$fragmentShaderHUDBaseMain
#ifdef BINARY_HIGHLIGHT_OCCLUSION
    // Instead of deciding on a per-pixel basis if the highlight is occluded,
    // do it for all highlight pixel based on the centroid occlusion. This
    // is a temporary solution for:
    // https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/9645
    if (voccluded == 1.0) {
      gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);
    } else {
      gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);
    }
#else
    $highlightWrite
#endif
  }
]]></snippet>


<snippet name="vertexShaderOcclusionTestPixel"><![CDATA[
  $vsprecisionf

  $commonAttributesAndUniformsHUD

  $alignToPixelCenter
  $projectPositionHUD

  void main(void) {
    vec4 posProjCenter;

    // Check for special value of position (0, 0, 0) which is used by the Renderer when graphics
    // are removed before the VBO is recompacted. If this is the case, then we just project outside
    // of clip space.
    if (dot($position, $position) > 0.0) {
      // Render single point to center of the pixel to avoid subpixel filtering to affect
      // the marker color
      ProjectHUDAux projectAux;
      vec4 posProj = projectPositionHUD(projectAux);

      posProjCenter = alignToPixelCenter(posProj, viewport.zw);
    }
    else {
      // Project out of clip space
      posProjCenter = vec4(1e038, 1e038, 1e038, 1.0);
    }

    gl_Position = posProjCenter;
    gl_PointSize = 1.0;
  }
]]></snippet>

</snippets>
