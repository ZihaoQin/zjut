<?xml version="1.0" encoding="UTF-8"?>
<!--
  Add your GLSL snippets to this file. You should start from
  importing your old GLSL files. For instance, if you have a
  file such as myShader.vs.glsl you should create a new <snippet name="myShaderVS">
  and then copy and paste the GLSL source as the content. You will then convert your
  code to use the {@link module:esri/views/vectorTiles/renderers/vtShaderSnippets vtShaderSnippets}
  instance to access the GLSL code, instead of importing it directly with require("dojo/text!...").
-->
<snippets>

  <snippet name="rgba2float"><![CDATA[
    // TODO consider moving this snippet into a util.xml file
    const vec4 rgba2float_factors = vec4(
        255.0 / (256.0),
        255.0 / (256.0 * 256.0),
        255.0 / (256.0 * 256.0 * 256.0),
        255.0 / (256.0 * 256.0 * 256.0 * 256.0)
      );

    float rgba2float(vec4 rgba) {
      // Convert components from 0->1 back to 0->255 and then
      // add the components together with their corresponding
      // fixed point factors, i.e. (256^1, 256^2, 256^3, 256^4)
      return dot(rgba, rgba2float_factors);
    }
  ]]></snippet>

  <snippet name="iconVS">
    <![CDATA[
      attribute vec2 a_pos;
      attribute vec2 a_vertexOffset;
      attribute vec4 a_tex;
      attribute vec4 a_levelInfo;

    #ifdef DD
      attribute vec4 a_color;
      attribute mediump float a_size;
    #endif // DD
      uniform lowp vec4 u_color;
      uniform mediump float u_size;

    #ifdef ID
      uniform mediump vec4 u_id;
      varying mediump vec4 v_id;
    #endif // ID

      varying lowp vec4 v_color;

      // the relative transformation of a vertex given in tile coordinates to a relative normalized coordinate
      // relative to the tile's upper left corner
      // the extrusion vector.
      uniform highp mat4 u_transformMatrix;

      // the extrude matrix which is responsible for the 'anti-zoom' as well as the rotation
      uniform highp mat4 u_extrudeMatrix;

      // u_normalized_origin is the tile's upper left corner given in normalized coordinates
      uniform highp vec2 u_normalized_origin;

      // the size of the mosaic given in pixels
      uniform vec2 u_mosaicSize;

      // the z of the layer. Given by the order of the layers in the style
      uniform mediump float u_depth;

      // the map's rotation from the north
      uniform mediump float u_mapRotation;
      uniform mediump float u_level;

      // indicate whether the current set of iconst should be kept upright when the map is rotated
      uniform lowp float u_keepUpright;

      // the rate of the change in the opacity (fade) of the icons
      uniform mediump float u_fadeSpeed;

      // the low level we transition (to/from)
      uniform mediump float u_minfadeLevel;

      // the high level we transition (to/from)
      uniform mediump float u_maxfadeLevel;

      // the amount of fade given teh current time past the last recorded level
      uniform mediump float u_fadeChange;

      // the opacity of the layer given by the painter
      uniform mediump float u_opacity;

      // the interpolated texture coordinate value to be used by the fragment shader in order to sample the sprite texture
      varying mediump vec2 v_tex;

      // the calculated transparency to be applied by the fragment shader. It is incorporating both the fade as well as the
      // opacity of the layer given by the painter
      varying lowp float v_transparency;

      varying mediump vec2 v_size;

      // the vertex offsets are given in integers, therefore in order to maintain a reasonable precision we multiply the values
      // by 8 and then at the shader devide by the same number
      const float C_OFFSET_PRECISION = 1.0 / 8.0;

      const float C_256_TO_RAD = 3.14159265359 / 128.0;
      const float C_DEG_TO_RAD = 3.14159265359 / 180.0;
      const float tileCoordRatio = 1.0 / 8.0;

      void main()
      {
        mediump float a_labelMinLevel = a_levelInfo[0];
        mediump float a_angle         = a_levelInfo[1];
        mediump float a_minLevel      = a_levelInfo[2];
        mediump float a_maxLevel      = a_levelInfo[3];

        // if the given vertex should not be visible simply clip it by adding it a value that will push it outside the clipping plane
        mediump float delta_z = 0.0;

        // If the label rotates with the map, and if the rotated label is upside down, hide it
        mediump float rotated = mod(a_angle + u_mapRotation, 256.0);
        delta_z += (1.0 - step(u_keepUpright, 0.0)) * step(64.0, rotated) * (1.0 - step(192.0, rotated)); //ie. z += (flip > 0) && (64 <= rotated) && (rotated < 192)

        // u_level is the current service level adjusted for the change in font size
        delta_z += 1.0 - step(a_minLevel, u_level); // Test if (level < minLevel)
        delta_z += step(a_maxLevel, u_level); // Test if (maxLevel <= level)

        // calculate the alpha given the change in the fade and the fade-speed
        lowp float alpha = clamp((u_fadeChange - a_labelMinLevel) / u_fadeSpeed, 0.0, 1.0);

        // if the speed is positive we are zooming in and therefore we need to 'fade-in'. Else we need to 'fade-out'
        v_transparency = (u_fadeSpeed >= 0.0 ? alpha : 1.0 - alpha);

        // now deal with the min/max fade-levels. If we exceeded the level we simply snap to 0 or 1
        if (u_maxfadeLevel < a_labelMinLevel)
        {
          v_transparency = 0.0;
        }
        if (u_minfadeLevel >= a_labelMinLevel)
        {
          v_transparency = 1.0;
        }

        // if label had been faded out, clip it
        delta_z += step(v_transparency, 0.0);

        vec2 offset = C_OFFSET_PRECISION * a_vertexOffset;

        v_size = abs(offset);

      #ifdef SDF
        offset = (120.0 / 86.0) * offset;
      #endif // SDF

      #ifdef DD
        mediump float icon_size = a_size * u_size;
      #else
        mediump float icon_size = u_size;
      #endif // DD
        gl_Position = vec4(u_normalized_origin, u_depth, 0.0) + u_transformMatrix * vec4(a_pos, 0.0, 1.0) + u_extrudeMatrix * icon_size * vec4(offset, delta_z, 0.0);

      #ifdef DD
        v_color = a_color * u_color;
      #else
        v_color = u_color;
      #endif // DD

      #ifdef ID
        v_id = u_id / 255.0;
      #endif // ID

        v_tex = a_tex.xy / u_mosaicSize;
        v_transparency *= v_color.w;
      }
    ]]>
  </snippet>

  <snippet name="iconFS">
    <![CDATA[
      precision mediump float;

      uniform lowp sampler2D u_texture; // SDF texture
    #ifdef SDF
      uniform lowp vec4 u_color; // a color to override the one of the vertex
      uniform lowp vec4 u_outlineColor;
      uniform mediump float u_outlineSize;
    #endif // SDF

      varying mediump vec2 v_tex;
      // the calculated transparency to be applied by the fragment shader. It is incorporating both the fade as well as the
      // opacity of the layer given by the painter
      varying lowp float v_transparency;

      varying mediump vec2 v_size;

      varying lowp vec4 v_color;

    #ifdef ID
      varying mediump vec4 v_id;
    #endif // ID

      // we need the conversion function from RGBA to float
      $rgba2float

      vec4 mixColors(vec4 color1, vec4 color2) {
        // perform un-premultiplied over operator (see https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending)
        // we use pre-multiplied colors hence the need for this kind of mixing. At lease we save ourselves an extra division...
        float compositeAlpha = color2.a + color1.a * (1.0 - color2.a);
        vec3 compositeColor = color2.rgb + color1.rgb * (1.0 - color2.a);

        return vec4(compositeColor, compositeAlpha);
      }

      void main()
      {
      #ifdef SDF
        lowp vec4 fillPixelColor = v_color;

        // calculate the distance from the edge [-0.5, 0.5]
        float d = rgba2float(texture2D(u_texture, v_tex)) - 0.5;

        // the soft edge ratio is about 1.5 pixels allocated for the soft edge.
        // 1 / 86 represents a single pixel given the size of the SDF is 128 and we add 4 pixels margins to deal with
        // other non SDF types.
        // The rasterized geometry takes only 86 pixels because of the extra 16 pixels margin for the outline.
        const float sofetEdgeRatio = 0.248062016; // ==> (32.0 / 86.0) / 1.5;
        float size = max(v_size.x, v_size.y);
        float dist = d * sofetEdgeRatio * size;

        // set the fragment's transparency according to the distance from the edge
        fillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);

        // count for the outline
        // therefore tint the entire icon area.
        if (u_outlineSize > 0.25) {
          lowp vec4 outlinePixelColor = u_outlineColor;
          // the outline limit ratio is derived from the 16 pixels allocated for the outline and the fact that 1/86 represents
          // a single pixel.
          const float outlineLimitRatio = (16.0 / 86.0);
          float clampedOutlineSize = sofetEdgeRatio * min(u_outlineSize, outlineLimitRatio * max(v_size.x, v_size.y));

          outlinePixelColor *= clamp(0.5 - (abs(dist) - clampedOutlineSize), 0.0, 1.0);

          // finally combine the outline and the fill colors
          gl_FragColor = v_transparency * mixColors(fillPixelColor, outlinePixelColor);
        }
        else {
          gl_FragColor = v_transparency * fillPixelColor;
        }
      #else // not an SDF
        lowp vec4 texColor = texture2D(u_texture, v_tex);
        gl_FragColor = v_transparency * texColor;
      #endif // SDF

      #ifdef ID
        if (gl_FragColor.a < 1.0 / 255.0) {
          discard;
        }
        gl_FragColor = v_id;
      #endif // ID
      }
    ]]>
  </snippet>

</snippets>

