// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.8/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/2d/engine/webgl/shaders/fillShaders.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\x3c!--\r\n  // YF TODO: (doc)\r\n--\x3e\r\n\x3csnippets\x3e\r\n  \x3csnippet name\x3d"fillVVUniformsVS"\x3e\r\n    \x3c![CDATA[\r\n  #if defined(VV_COLOR)|| defined(VV_OPACITY)\r\n    attribute vec4 a_vv;\r\n  #endif // VV_COLOR || VV_OPACITY\r\n\r\n  #ifdef VV_COLOR\r\n    uniform float u_vvColorValues[8];\r\n    uniform vec4 u_vvColors[8];\r\n  #endif // VV_COLOR\r\n\r\n  #ifdef VV_OPACITY\r\n    uniform float u_vvOpacityValues[8];\r\n    uniform float u_vvOpacities[8];\r\n  #endif // VV_OPACITY\r\n\r\n    ]]\x3e\r\n  \x3c/snippet\x3e\r\n\r\n  \x3csnippet name\x3d"fillVVFunctions"\x3e\r\n    \x3c![CDATA[\r\n    bool isNan(float val) {\r\n      return !( val \x3c 0.0 || 0.0 \x3c val || val \x3d\x3d 0.0 );\r\n    }\r\n    \r\n  #ifdef VV_OPACITY\r\n    const int VV_OPACITY_N \x3d 8;\r\n\r\n    float getVVOpacity(float opacityValue) {\r\n      if (isNan(opacityValue)) { \r\n        return 1.0;\r\n      }\r\n\r\n      if (opacityValue \x3c\x3d u_vvOpacityValues[0]) {\r\n        return u_vvOpacities[0];\r\n      }\r\n\r\n      for (int i \x3d 1; i \x3c VV_OPACITY_N; ++i) {\r\n        if (u_vvOpacityValues[i] \x3e\x3d opacityValue) {\r\n          float f \x3d (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\r\n          return mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\r\n        }\r\n      }\r\n\r\n      return u_vvOpacities[VV_OPACITY_N - 1];\r\n    }\r\n  #endif // VV_OPACITY\r\n\r\n  #ifdef VV_COLOR\r\n    const int VV_COLOR_N \x3d 8;\r\n\r\n    vec4 getVVColor(float colorValue, vec4 fallback) {\r\n      if (isNan(colorValue)) { \r\n        return fallback;\r\n      }\r\n      \r\n      if (colorValue \x3c\x3d u_vvColorValues[0]) {\r\n        return u_vvColors[0];\r\n      }\r\n\r\n      for (int i \x3d 1; i \x3c VV_COLOR_N; ++i) {\r\n        if (u_vvColorValues[i] \x3e\x3d colorValue) {\r\n          float f \x3d (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\r\n          return mix(u_vvColors[i-1], u_vvColors[i], f);\r\n        }\r\n      }\r\n\r\n      return u_vvColors[VV_COLOR_N - 1];\r\n    }\r\n  #endif // VV_COLOR\r\n    ]]\x3e\r\n  \x3c/snippet\x3e\r\n\r\n  \x3csnippet name\x3d"fillVS"\x3e\r\n    \x3c![CDATA[\r\n      precision mediump float;\r\n\r\n      attribute vec2 a_pos;\r\n      attribute vec4 a_id; // since we need to render the Id as a color we need to break it into RGBA components. so just like a color, the Id is normalized.\r\n      attribute vec4 a_color;\r\n      attribute vec4 a_tlbr;\r\n      attribute vec4 a_aux;\r\n\r\n      uniform highp mat4 u_transformMatrix;\r\n      uniform highp vec2 u_normalized_origin;\r\n\r\n      varying lowp vec4 v_color;\r\n      varying lowp float v_opacity;\r\n\r\n      // import the VV inputs and functions (they are #ifdefed, so if the proper #define is not set it will end-up being a no-op)\r\n      $fillVVUniformsVS\r\n      $fillVVFunctions\r\n\r\n  #ifdef PATTERN\r\n    uniform mediump float u_zoomFactor;\r\n    uniform mediump vec2 u_mosaicSize;\r\n\r\n    varying mediump vec4 v_tlbr;\r\n    varying mediump vec2 v_tileTextureCoord;\r\n  #endif // PATTERN\r\n\r\n  #ifdef ID\r\n    varying highp vec4 v_id;\r\n  #endif // ID\r\n\r\n      void main()\r\n      {\r\n  #ifdef VV_OPACITY\r\n        v_opacity \x3d getVVOpacity(a_vv.y);\r\n  #else\r\n        v_opacity \x3d 1.0;\r\n  #endif\r\n\r\n  #ifdef VV_COLOR\r\n       v_color \x3d getVVColor(a_vv.x, a_color);\r\n  #else\r\n       v_color \x3d a_color;\r\n  #endif // VV_COLOR\r\n\r\n  #ifdef ID\r\n      v_id \x3d a_id;\r\n  #endif // ID\r\n\r\n  #ifdef PATTERN\r\n       // calculate the pattern matrix\r\n       mat3 patternMatrix \x3d mat3(1.0, 0.0, 0.0,\r\n                                 0.0, 1.0, 0.0,\r\n                                 0.0, 0.0, 1.0);\r\n       patternMatrix[0][0] \x3d 1.0 / (u_zoomFactor * a_aux.x);\r\n       patternMatrix[1][1] \x3d 1.0 / (u_zoomFactor * a_aux.y);\r\n\r\n       // calculate the texture coordinates of the current vertex. It will of course get interpolated.\r\n       // The pattern matrix is a 3x3 scale matrix which \'tiles\' the texture inside the tile, translating from\r\n       // tile coordinates to texture coordinates.\r\n       v_tileTextureCoord \x3d (patternMatrix * vec3(a_pos, 1.0)).xy;\r\n       v_tlbr \x3d vec4(a_tlbr.x / u_mosaicSize.x, a_tlbr.y / u_mosaicSize.y, a_tlbr.z / u_mosaicSize.x, a_tlbr.w / u_mosaicSize.y);\r\n  #endif // PATTERN\r\n\r\n        gl_Position \x3d vec4(u_normalized_origin, 0.0, 0.0) + u_transformMatrix * vec4(a_pos, 0, 1.0);\r\n      }\r\n    ]]\x3e\r\n  \x3c/snippet\x3e\r\n\r\n  \x3csnippet name\x3d"fillFS"\x3e\r\n    \x3c![CDATA[\r\n      precision lowp float;\r\n      uniform lowp float u_opacity;\r\n\r\n  #ifdef PATTERN\r\n      uniform lowp sampler2D u_texture;\r\n\r\n      varying mediump vec4 v_tlbr;\r\n      varying mediump vec2 v_tileTextureCoord;\r\n  #endif // PATTERN\r\n\r\n  #ifdef ID\r\n    varying highp vec4 v_id;\r\n  #endif // ID\r\n\r\n      varying lowp vec4 v_color;\r\n      varying lowp float v_opacity;\r\n\r\n      void main()\r\n      {\r\n  #ifdef PATTERN\r\n         // normalize the calculated texture coordinate such that it fits in the range of 0 to 1.\r\n         mediump vec2 normalizedTextureCoord \x3d mod(v_tileTextureCoord, 1.0);\r\n         // interpolate the image coordinate between the top-left and the bottom right to get the actual position to sample.\r\n         // after normalizing the position, we get a value ranging between 0 and 1 which refers to the entire texture, however\r\n         // we need to only sample from area that has our sprite in the mosaic.\r\n         mediump vec2 samplePos \x3d mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\r\n         // sample the sprite mosaic\r\n         lowp vec4 color \x3d texture2D(u_texture, samplePos);\r\n         gl_FragColor \x3d u_opacity * v_opacity * v_color * color;\r\n  #else\r\n        gl_FragColor \x3d u_opacity * v_opacity * v_color;\r\n  #endif // PATTERN\r\n\r\n  #ifdef HIGHLIGHT\r\n        gl_FragColor.a \x3d step(1.0 / 255.0, gl_FragColor.a);\r\n  #endif // HIGHLIGHT\r\n\r\n  #ifdef ID\r\n      //if (gl_FragColor.a \x3c 1.0 / 255.0) {\r\n      //  discard;\r\n      //}\r\n      gl_FragColor \x3d v_id;\r\n  #endif // ID\r\n      }\r\n    ]]\x3e\r\n  \x3c/snippet\x3e\r\n\x3c/snippets\x3e\r\n'}});
define(["require","exports","dojo/text!./fillShaders.xml","../../../../webgl/ShaderSnippets"],function(a,d,c,b){a=new b;b.parse(c,a);return a});