// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.8/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/environment/materials/RealisticAtmosphereMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3c!--Vertex Shader for Atmosphere--\x3e\r\n\x3csnippet name\x3d"vsRealisticAtmosphere"\x3e\x3c![CDATA[\r\n//\r\n// Based on Atmospheric scattering vertex shader by Sean O\'Neil from GPU Gems 2 Chapter 16.\r\n//\r\n// Link:                   http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter16.html\r\n// Download Portal:        http://http.download.nvidia.com/developer/GPU_Gems_2/CD/Index.html\r\n// Unmodified Source Code: http://http.download.nvidia.com/developer/GPU_Gems_2/CD/Content/16.zip\r\n//\r\n// Adapted for WebGIS by Jascha Gr\u00fcbel (jgruebel@esri.com), Z\u00fcrich 2015\r\n//\r\n\r\n  $vsprecisionf\r\n\r\n  //Camera\r\n  uniform vec2 halfSizeNearPlane;\r\n  uniform vec3 v3CameraUp;\r\n  uniform vec3 v3CameraRight;\r\n  uniform vec3 v3CameraDir;\r\n  uniform vec2 v2CameraCenterOffset;\r\n\r\n  //Attributes\r\n  attribute vec3 $position;\r\n  attribute vec2 $uv0;\r\n\r\n  //Varyings\r\n  varying vec3 v3WorldRay;\r\n  varying vec2 vtc;\r\n\r\n#ifdef HAZE\r\n  varying vec3 v3EyeDir;\r\n#endif\r\n\r\n  void main(void) {\r\n    vec3 v3Pos \x3d $position;\r\n    vtc \x3d $uv0;\r\n    vec2 rayvtc \x3d $uv0 - v2CameraCenterOffset;\r\n\r\n#ifdef HAZE\r\n    v3EyeDir \x3d vec3((2.0*halfSizeNearPlane *rayvtc)-halfSizeNearPlane,-1.0);\r\n#else\r\n    vec3 v3EyeDir \x3d vec3((2.0*halfSizeNearPlane *rayvtc)-halfSizeNearPlane,-1.0);\r\n#endif\r\n    v3WorldRay \x3d v3EyeDir.z*v3CameraDir + v3EyeDir.y*v3CameraUp + v3EyeDir.x*v3CameraRight;\r\n    gl_Position \x3d vec4(v3Pos, 1.0);\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"atmosphereScaleFunction"\x3e\x3c![CDATA[\r\n  //Approximation for inner integral based on a radii ratio of 10.25:10\r\n  float scale(float fCos){\r\n    float x \x3d 1.0 - fCos;\r\n    return exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"toneMapperConstants"\x3e\x3c![CDATA[\r\n#ifdef HAZE\r\n  const float fOneOverGamma \x3d 1.0;//Gamma \x3d 1.0\r\n#else\r\n  const float fOneOverGamma \x3d 0.454545; // Gamma \x3d 2.2\r\n#endif\r\n  const vec3 v3OneOverGamma \x3d vec3(fOneOverGamma);\r\n\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"exponentialToneMapper"\x3e\x3c![CDATA[\r\n  //ToneMapping operators\r\n  vec3 expTM(vec3 inputColor,float exposure){\r\n      return pow(1.0 - exp(inputColor * -exposure), v3OneOverGamma);\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"reinhardToneMapper"\x3e\x3c![CDATA[\r\n  vec3 reinhardTM(vec3 inputColor, float exposure){\r\n      vec3 intermediate \x3d inputColor *exposure;\r\n      intermediate /\x3d (1.0+intermediate);\r\n      return pow(intermediate, v3OneOverGamma);\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\r\n\x3csnippet name\x3d"HSVColorSpace"\x3e\x3c![CDATA[\r\n//based on http://gamedev.stackexchange.com/a/59808\r\n// Hue in range [0,1] instead of 360\u00b0\r\nvec3 rgb2hsv(vec3 c)\r\n{\r\n    vec4 K \x3d vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n    vec4 p \x3d mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n    vec4 q \x3d mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n\r\n    float d \x3d q.x - min(q.w, q.y);\r\n    float e \x3d 1.0e-10;\r\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\r\n}\r\n\r\nvec3 hsv2rgb(vec3 c)\r\n{\r\n    vec4 K \x3d vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n    vec3 p \x3d abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\r\n}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"atmosphereUniformsConstantsVaryings"\x3e\x3c![CDATA[\r\n\r\n  //Light\r\n  uniform vec3 v3LightDir;      // The direction vector to the light source\r\n  uniform vec3 v3InvWavelength; // 1 / pow(wavelength, 4) for the red, green, and blue channels\r\n  uniform vec3 v3InvWavelengthScaled; //v3InvWavelength * fKr4PI + fKm4PI\r\n\r\n  //Radii\r\n  uniform vec4 v4Radii; // inner, inner^2, outer, outer^2,\r\n\r\n  //Atmosphere\r\n  const float fKrESun \x3d 0.075;        // Kr * ESun \x3d 0.005 * 15.0\r\n  const float fKmESun \x3d 0.015;        // Km * ESun \x3d 0.005 * 15\r\n  //uniform float fScale;         // 1 / (fOuterRadius - fInnerRadius)\r\n  //uniform float fScaleDepth;    // The scale depth (i.e. the altitude at which the atmosphere\'s average density is found)\r\n  //uniform float fScaleOverScaleDepth; // fScale / fScaleDepth\r\n  //uniform float fOneOverScaleDepth; // 1.0 / fScaleDepth\r\n\r\n  //uniform float fScaleDepthBlue;    // The scale depth (i.e. the altitude at which the atmosphere\'s average density is found)\r\n  //uniform float fScaleOverScaleDepthBlue; // fScale / fScaleDepth\r\n  //uniform float fOneOverScaleDepthBlue; // 1.0 / fScaleDepth\r\n\r\n  uniform vec4 v4AtmosParams1; //(fScale,fScaleDepth,fScaleOverScaleDepth,fOneOverScaleDepth)\r\n  uniform vec4 v4AtmosParams2; //(g,fScaleDepthBlue,fScaleOverScaleDepthBlue,fOneOverScaleDepthBlue)\r\n#ifndef HAZE\r\n  uniform vec4 v4AtmosParams3; //(g2,fMiePhaseCoefficients,fLowerAlphaBlendBound,fOneOverOuterRadiusMinusAlphaBlendBound)\r\n  uniform float fInnerFadeDistance;\r\n  uniform float fAltitudeFade;\r\n#endif\r\n\r\n  //Camera\r\n  uniform vec3 v3CameraPos;     // The camera\'s current position\r\n  //uniform float fCameraHeight;  // The camera\'s current height\r\n  //uniform float fCameraHeight2; // fCameraHeight^2\r\n  //uniform float fC; //fCameraHeight2 - fOuterRadius2; // C \x3d ||o-c||^2 - r^2\r\n  //uniform float fCSur; //fCameraHeight2 - (fInnerRadius2 - 63756370000.0); // C \x3d ||o-c||^2 - r^2\r\n  uniform vec4 v4SphereComp; //The camera\'s current height, CameraHeight^2,fC,fCSur\r\n  uniform vec2 nearFar;\r\n\r\n  //Camera HDR\r\n#ifdef HAZE\r\n  const float fExposure \x3d 1.5;\r\n#else\r\n  const float fExposure \x3d 2.0;\r\n#endif\r\n\r\n#ifdef HAZE\r\n  //Depth texture\r\n  uniform sampler2D tDepth;\r\n#endif\r\n\r\n  //Testing variables\r\n  uniform float showTest;\r\n\r\n  //Varyings\r\n  varying vec3 v3EyeDir;\r\n  varying vec3 v3WorldRay;\r\n  varying vec2 vtc;\r\n\r\n  //Loop constants for integral approximation\r\n  const float fSamples \x3d 5.0;\r\n  const int maxSamples \x3d 5;\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\r\n\x3csnippet name\x3d"atmospherePrecomputation"\x3e\x3c![CDATA[\r\n    float fInnerRadius \x3d v4Radii[0];   // The inner (planetary) radius\r\n    float fInnerRadius2 \x3d v4Radii[1];  // fInnerRadius^2\r\n    float fOuterRadius \x3d v4Radii[2];   // The outer (atmosphere) radius\r\n    float fOuterRadius2 \x3d v4Radii[3];  // fOuterRadius^2\r\n\r\n    float fCameraHeight \x3d v4SphereComp[0];\r\n    float fCameraHeight2 \x3d v4SphereComp[1];\r\n    float fC \x3d v4SphereComp[2];\r\n    float fCSur \x3d v4SphereComp[3];\r\n\r\n    vec3 cameraPosition \x3d v3CameraPos;\r\n\r\n    //Debug variables\r\n    vec3 test \x3d vec3(0.0,0.0,0.0);\r\n\r\n    //Obtain ray from Camera\r\n    vec3 worldSpaceRay \x3d normalize(v3WorldRay);\r\n\r\n    //Compute Atmosphere intersection; i.e. ray/sphere intersection\r\n    float B \x3d 2.0 * dot(cameraPosition, worldSpaceRay); // B \x3d 2(l * (o-c))\r\n    float det \x3d B*B - 4.0 * fC; // det \x3d B^2 - 4.0* C\r\n\r\n    //idealized sphere intersection to discard early some pixels\r\n    float detSur \x3d B*B - 4.0 * fCSur; // det \x3d B^2 - 4.0* C\r\n\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\r\n\x3csnippet name\x3d"atmosphereDiscardPixels"\x3e\x3c![CDATA[\r\n#ifdef HAZE\r\n      // only use red channel from depth texture.\r\n      // see \'Issues\' at https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture\r\n      float depthSample \x3d texture2D(tDepth, vtc).r;\r\n\r\n      float zNear \x3d nearFar[0];\r\n      float zFar \x3d nearFar[1];\r\n\r\n      // http://web.archive.org/web/20130416194336/http://olivers.posterous.com/linear-depth-in-glsl-for-real\r\n      float zNorm \x3d 2.0 * depthSample - 1.0;\r\n      float linDepth \x3d 2.0 * zNear * zFar /\r\n        (zFar + zNear - zNorm * (zFar - zNear));\r\n\r\n      float rayEndT;\r\n      float altitudeAlpha \x3d 1.0;\r\n\r\n      // find intersections with ground, but only between the near and far\r\n      // clipping planes.\r\n      if (depthSample \x3c 1.0 \x26\x26 depthSample \x3e 0.0) {\r\n        vec3 cameraSpaceRay \x3d normalize(v3EyeDir);\r\n        cameraSpaceRay /\x3d cameraSpaceRay.z;\r\n        cameraSpaceRay *\x3d linDepth;\r\n\r\n        float cameraSpaceRayLength \x3d length(cameraSpaceRay);\r\n\r\n        vec3 v3World \x3d cameraPosition + worldSpaceRay * cameraSpaceRayLength;\r\n        float v3WorldRadius2 \x3d dot(v3World, v3World);\r\n\r\n        // Handle tall structures:\r\n        // https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/5450\r\n        float transitionStart \x3d fInnerRadius + 20000.0;\r\n        float transitionHeight \x3d 25000.0;\r\n        float transitionEnd \x3d transitionStart + transitionHeight;\r\n\r\n        float edge0 \x3d transitionStart * transitionStart;\r\n        float edge1 \x3d transitionEnd * transitionEnd;\r\n\r\n        altitudeAlpha \x3d 1.0 - clamp((v3WorldRadius2 - edge0) / (edge1 - edge0), 0.0, 1.0);\r\n        rayEndT \x3d cameraSpaceRayLength;\r\n\r\n        if (altitudeAlpha \x3e 0.0 \x26\x26 detSur \x3e 0.0) {\r\n          float nearSurfaceT \x3d 0.5 *(-B - sqrt(detSur));\r\n          float interp \x3d clamp(((fCameraHeight - fInnerRadius) - 2000000.0) / 6000000.0, 0.0, 1.0);\r\n          rayEndT \x3d mix(cameraSpaceRayLength, nearSurfaceT, interp);\r\n        }\r\n      }\r\n#endif\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"atmosphereUnpackAddUniforms"\x3e\x3c![CDATA[\r\n        float fScale \x3d v4AtmosParams1.x;\r\n        vec2 v2ScaleDepth \x3d vec2(v4AtmosParams1.y,v4AtmosParams2.y);//fScaleDepth, fScaleDepthBlue\r\n        vec2 v2ScaleOverScaleDepth \x3d vec2(v4AtmosParams1.z,v4AtmosParams2.z);//fScaleOverScaleDepth, fScaleOverScaleDepthBlue\r\n        vec2 v2OneOverScaleDepth \x3d vec2(v4AtmosParams1.w,v4AtmosParams2.w);//fOneOverScaleDepth, fOneOverScaleDepthBlue\r\n\r\n#ifndef HAZE\r\n        float g \x3d v4AtmosParams2.x;\r\n        float g2 \x3d v4AtmosParams3.x;\r\n        float fMiePhaseCoefficients \x3d v4AtmosParams3.y;\r\n        float fLowerAlphaBlendBound \x3d v4AtmosParams3.z;\r\n        float fOneOverOuterRadiusMinusAlphaBlendBound \x3d v4AtmosParams3.w;\r\n#endif\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\r\n\x3csnippet name\x3d"atmosphereComputeRayAndLoopSetup"\x3e\x3c![CDATA[\r\n        float rayStartT \x3d 0.5 *(-B - sqrt(det)); //near intersection with atmosphere\r\n#ifdef HAZE\r\n        float nearT \x3d abs(rayStartT);\r\n        float farT \x3d abs(rayEndT);\r\n#else\r\n        float rayEndT \x3d 0.5 *(-B + sqrt(det)); //far intersection with atmosphere\r\n\r\n#endif\r\n\r\n        float fDistance;//calculate its scattering offset\r\n        // Calculate the ray\'s starting position\r\n        if (rayStartT \x3c fMinRayStart)\r\n        { //ray starts from camera or inner radius sphere to far\r\n          rayStartT \x3d fMinRayStart;\r\n#ifndef HAZE\r\n          // clamp to value at inner radius altitude\r\n          fDistance \x3d fScale * min(0.0, fInnerRadius - fCameraHeight);\r\n#endif\r\n        }\r\n#ifndef HAZE\r\n        else\r\n        {//outside atmosphere\r\n          fDistance \x3d -1.0;\r\n        }\r\n#endif\r\n\r\n        // Initialize the scattering loop variables\r\n        vec3 v3Start \x3d cameraPosition + worldSpaceRay * rayStartT;\r\n\r\n#ifdef HAZE\r\n        vec3 v3End \x3d cameraPosition + worldSpaceRay * rayEndT;\r\n\r\n        float fEndLength \x3d length(v3End);\r\n        float fLocalCameraHeight \x3d length(v3Start);\r\n\r\n        //computed for the original end point to get consistent light angles after possible inversions\r\n        float fLightAngle \x3d dot(v3LightDir, v3End) / fEndLength;\r\n\r\n        if (nearT \x3e farT)\r\n        {\r\n          if (fLocalCameraHeight \x3c fEndLength)\r\n          {\r\n            //Switch positive slopes for flipped rays\r\n            v3End \x3d cameraPosition + worldSpaceRay * rayStartT;\r\n            v3Start \x3d cameraPosition + worldSpaceRay * rayEndT;\r\n            worldSpaceRay *\x3d -1.0;\r\n            fEndLength \x3d length(v3End);\r\n            fLocalCameraHeight \x3d length(v3Start);\r\n          }\r\n          else if (fLocalCameraHeight \x3d\x3d fEndLength)\r\n          {// create minuscule fake slope for integration if the slope is zero\r\n            fLocalCameraHeight +\x3d 1.0; //BUGFIX, if the height of camera and ground is equal the equation breaks, add fake meter to camera height to get\r\n            //slope for the camera function\r\n          }\r\n        }\r\n\r\n        //Calculate its scattering offset\r\n        // Assumes camera constrains of WSV 3.8\r\n        float fCameraDepth;\r\n        float fCameraDepthBlue;\r\n        if (fLocalCameraHeight \x3e fOuterRadius)\r\n        {\r\n          fDistance \x3d fInnerRadius - fOuterRadius;\r\n        } else\r\n        {//outside atmosphere\r\n          fDistance \x3d fEndLength - fLocalCameraHeight;\r\n        }\r\n\r\n#endif\r\n        vec2 v2OpticalStartDepth \x3d exp(fDistance * v2OneOverScaleDepth);\r\n\r\n        float fRayLength \x3d rayEndT - rayStartT;\r\n        float fSampleLength \x3d fRayLength / fSamples;\r\n        float fScaledLength \x3d fSampleLength * fScale;\r\n        vec3 v3SampleRay \x3d worldSpaceRay * fSampleLength;\r\n        vec3 v3SamplePoint \x3d v3Start + v3SampleRay * 0.5;\r\n\r\n#ifdef HAZE\r\n        float fCameraAngle \x3d dot(-worldSpaceRay, v3End) / fEndLength;\r\n        float fScaleCameraAngle \x3d scale(fCameraAngle);\r\n        vec2 v2CameraOffset \x3d fScaleCameraAngle*v2OpticalStartDepth;\r\n\r\n        float scaledValues \x3d scale(fLightAngle) + fScaleCameraAngle;\r\n        vec2 v2ScaledValuesDepth \x3d scaledValues * v2ScaleDepth;\r\n#else\r\n        float fCameraAngle \x3d dot(worldSpaceRay, v3Start / length(v3Start));\r\n        float angleMultiplier \x3d fCameraAngle\x3e0.0?fCameraAngle:0.0;\r\n\r\n        float fScaleCameraAngle \x3d scale(fCameraAngle);\r\n        vec2 v2CameraOffset \x3d fScaleCameraAngle*v2OpticalStartDepth * v2ScaleDepth;\r\n#endif\r\n\r\n        //Loop variables\r\n        vec3 v3FrontColor \x3d vec3(0.0, 0.0, 0.0);\r\n        vec3 v3FrontColorBlue \x3d vec3(0.0, 0.0, 0.0);\r\n        vec3 v3Attenuate\x3d vec3(0.0, 0.0, 0.0);\r\n        vec3 v3AttenuateBlue \x3d vec3(0.0, 0.0, 0.0);\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\r\n\x3csnippet name\x3d"atmosphereComputeSampleContribution"\x3e\x3c![CDATA[\r\n          float fHeight \x3d length(v3SamplePoint);\r\n          vec2 v2Depth \x3d exp(v2ScaleOverScaleDepth * (fInnerRadius - fHeight));\r\n#ifdef HAZE\r\n          vec2 v2Scatter \x3d v2Depth*v2ScaledValuesDepth-v2CameraOffset;\r\n#else\r\n          float fLightAngle \x3d dot(v3LightDir, v3SamplePoint) / fHeight;\r\n          float fCameraAngle \x3d dot(worldSpaceRay, v3SamplePoint) / fHeight;\r\n          float fTempScaledValues \x3d scale(fLightAngle) - scale(fCameraAngle);\r\n          vec2 v2Scatter \x3d v2CameraOffset + fTempScaledValues*v2Depth* v2ScaleDepth;\r\n#endif\r\n          v3Attenuate \x3d exp(-v2Scatter.x * v3InvWavelengthScaled);\r\n          v3AttenuateBlue \x3d exp(-v2Scatter.y * v3InvWavelengthScaled);\r\n\r\n          v3FrontColor +\x3d v3Attenuate * v2Depth.x;\r\n          v3FrontColorBlue +\x3d v3AttenuateBlue * v2Depth.y;\r\n\r\n          v3SamplePoint +\x3d v3SampleRay;\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\r\n\x3csnippet name\x3d"atmosphereComputeHDRColors"\x3e\x3c![CDATA[\r\n        //Phase computation\r\n        //clamp to avoid numerical instability at fCos \x3d\x3d -1.0 (and close values) to display fake sun\r\n        float fCos \x3d clamp(dot(v3LightDir, -worldSpaceRay ),-0.9999999,1.0);\r\n        float fOnePlusCos2 \x3d fCos*fCos + 1.0;\r\n#ifdef HAZE\r\n        // Finally, scale the Rayleigh colors and set up the varying variables for the pixel shader\r\n        vec3 colorCoefficients \x3d (fScaledLength* 0.75 * fOnePlusCos2)*(fKrESun*v3InvWavelength+fKmESun);\r\n\r\n        //Scaled Length is only applied afterwards to save multiplications\r\n        vec3 v3Color \x3d colorCoefficients *v3FrontColor;\r\n        vec3 v3ColorBlue \x3d colorCoefficients *v3FrontColorBlue;\r\n#else\r\n        vec3 v3RayleighCoefficients \x3d (fScaledLength*0.75 * fOnePlusCos2*fKrESun)*v3InvWavelength;\r\n        float fMieCoefficients \x3d fScaledLength*fKmESun * fMiePhaseCoefficients * fOnePlusCos2 / pow(1.0 + g2 - 2.0*g*fCos, 1.5);\r\n\r\n        // Calculate the attenuation factor for the ground\r\n        vec3 v3Color \x3d v3RayleighCoefficients * v3FrontColor + fMieCoefficients * v3FrontColor;\r\n        vec3 v3ColorBlue \x3d v3RayleighCoefficients * v3FrontColorBlue + fMieCoefficients * v3FrontColorBlue;\r\n#endif\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\r\n\x3csnippet name\x3d"atmosphereComputePixelColor"\x3e\x3c![CDATA[\r\n\r\n\r\n        //HDR to LDR conversion\r\n        vec3 ldrBlue \x3d expTM(v3ColorBlue,2.0*fExposure);\r\n        vec3 ldrRed \x3d expTM(v3Color,fExposure);\r\n\r\n        //mix reddish and blueish atmosphere\r\n        vec3 LDR \x3d mix(ldrBlue,ldrRed,0.2);\r\n#ifdef HAZE\r\n        LDR *\x3d (1.0-fCameraAngle);\r\n        vec3 hsv \x3d rgb2hsv(LDR);\r\n        hsv.y \x3d clamp(hsv.y*1.5,0.0,1.0);//boost haze saturation by 50%\r\n        LDR \x3d hsv2rgb(hsv);\r\n        vec3 finalColor \x3d LDR;\r\n        // when rendering we specify the blend functions such that\r\n        // newDestColor \x3d oldDestColor*(1.0-finalColor) + finalColor\r\n#else\r\n        //reinhard tonemapper for looking upwards\r\n        vec3 ldrReinhard \x3d reinhardTM(v3Color,fExposure);\r\n        LDR +\x3d angleMultiplier*ldrReinhard;\r\n\r\n        //height dependent parameter to smooth out reddish atmosphere\r\n        float side \x3d (rayEndT+rayStartT)*0.5;\r\n        float atmoHeight \x3d sqrt(fCameraHeight2 - side*side);\r\n        float h2 \x3d clamp(1.0-(atmoHeight-fLowerAlphaBlendBound)/(fOuterRadius-fLowerAlphaBlendBound),0.0,1.0);\r\n\r\n        vec3 finalColor \x3d LDR*h2;\r\n        vec3 hsv \x3d rgb2hsv(finalColor);\r\n        hsv.y \x3d clamp(hsv.y*1.5,0.0,1.0);//boost sky saturation by 50%\r\n        finalColor \x3d hsv2rgb(hsv);\r\n#endif\r\n#ifndef HAZE\r\n        float atmosStrength \x3d clamp((length(ldrRed)-0.05)*1.05,0.0,1.0);\r\n        gl_FragColor \x3d vec4(finalColor, atmosStrength*clamp(1.0-(atmoHeight-fInnerRadius)/(fOuterRadius-fInnerRadius),0.0,1.0));\r\n#else\r\n        gl_FragColor \x3d vec4(finalColor, 1.0) * altitudeAlpha;\r\n#endif\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3c!--Fragment Shader for Atmosphere--\x3e\r\n\x3csnippet name\x3d"fsRealisticAtmosphere"\x3e\x3c![CDATA[\r\n\r\n  $fsprecisionf\r\n\r\n$atmosphereUniformsConstantsVaryings\r\n\r\n$atmosphereScaleFunction\r\n\r\n  //Conversion implementation found in util.xml\r\n$rgba2float\r\n\r\n\r\n$toneMapperConstants\r\n$exponentialToneMapper\r\n#ifndef HAZE\r\n$reinhardToneMapper\r\n#endif\r\n\r\n$HSVColorSpace\r\n\r\n  void main()\r\n  {\r\n\r\n    $atmospherePrecomputation\r\n\r\n    // the minimal sample start position:\r\n    // at the camera by default, on the earth radius surface if the camera is underground.\r\n    float fMinRayStart \x3d 0.0;\r\n#ifndef HAZE\r\n    // When the ray intersects the earth surface, fade the sky to a simple light direction\r\n    // based color. This is used to make sure we have a white background in underground\r\n    // mode (at noon).\r\n    float fSurfaceBlend \x3d 0.0;\r\n    vec4 surfaceColor \x3d vec4(0.0);\r\n    if (detSur \x3e\x3d 0.0) {\r\n      float nearSurfaceT \x3d max(0.0, 0.5 *(-B - sqrt(detSur)));\r\n      float farSurfaceT \x3d max(0.0, 0.5 *(-B + sqrt(detSur)));\r\n\r\n      if (nearSurfaceT \x3d\x3d 0.0) {\r\n        fMinRayStart \x3d farSurfaceT;\r\n      }\r\n\r\n      // Compute lighting at the point where the ray enters the earth surface\r\n      // Lighting computation is copied from the terrain shader.\r\n      vec3 vPos \x3d cameraPosition + worldSpaceRay * nearSurfaceT;\r\n      float fLightAngle \x3d dot(v3LightDir, normalize(vPos));\r\n      float fBrightness \x3d max(0.0, (smoothstep(-1.0, 0.8, 2.0 * fLightAngle)));\r\n\r\n      // Make the surface transparent based on altitude\r\n      surfaceColor \x3d vec4(fBrightness, fBrightness, fBrightness, 1.0 - fAltitudeFade);\r\n\r\n      // Fade based on the distance the ray travels below the earth surface\r\n      float fRelDist \x3d (farSurfaceT - nearSurfaceT) / fInnerFadeDistance;\r\n\r\n      // early exit\r\n      if (fRelDist \x3e 1.0) {\r\n        gl_FragColor \x3d surfaceColor;\r\n        return;\r\n      }\r\n\r\n      fSurfaceBlend \x3d smoothstep(0.0, 1.0, fRelDist * fRelDist);\r\n    }\r\n#endif\r\n\r\n    //Inside Atmosphere\r\n    if (det \x3e\x3d 0.0) {\r\n#ifdef HAZE\r\n      $atmosphereDiscardPixels\r\n#endif\r\n      $atmosphereUnpackAddUniforms\r\n\r\n      $atmosphereComputeRayAndLoopSetup\r\n\r\n      // Now loop through the sample rays\r\n      for(int i\x3d0; i\x3cmaxSamples; i++)\r\n      {\r\n        $atmosphereComputeSampleContribution\r\n      }\r\n\r\n      $atmosphereComputeHDRColors\r\n\r\n      $atmosphereComputePixelColor\r\n\r\n#ifndef HAZE\r\n      if (fSurfaceBlend \x3e 0.0) {\r\n        gl_FragColor \x3d mix(gl_FragColor, surfaceColor, fSurfaceBlend);\r\n      }\r\n#endif\r\n\r\n      //Debug variable overlay\r\n      if(showTest\x3e0.0){\r\n        gl_FragColor \x3d vec4(test,1.0);\r\n      }\r\n    } else {//Outside Atmosphere\r\n      gl_FragColor \x3d vec4(0.0);\r\n    }\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3c/snippets\x3e\r\n'}});
define("require exports dojo/text!./materials/RealisticAtmosphereMaterial.xml ../../../core/Handles ../../../core/promiseUtils ../../../core/watchUtils ./atmosphereUtils ../lib/glMatrix ../support/earthUtils ../webgl-engine/lib/DefaultVertexAttributeLocations ../webgl-engine/lib/DefaultVertexBufferLayouts ../webgl-engine/lib/GeometryRenderer ../webgl-engine/lib/GeometryUtil ../webgl-engine/lib/RenderPass ../webgl-engine/lib/RenderSlot ../../webgl/Program".split(" "),function(r,m,z,A,B,n,t,p,C,u,D,
E,F,G,v,w){var g=C.earthRadius,d=p.vec3d,h=p.vec2d,k=p.vec4d;r=.02*Math.PI;m=.004*Math.PI;var x=d.createFrom(1/Math.pow(.65,4),1/Math.pow(.57,4),1/Math.pow(.475,4)),q=d.create(x);d.scale(q,r);d.add(q,d.createFrom(m,m,m));var y=(1- -.99999*-.99999)/(2+-.99999*-.99999)*1.5;return function(){function c(a){this.view=null;this.needsRender=!1;this.didRender=!0;this.slot=v.POSTPROCESSING_ATMOSPHERE_OPAQUE;this._hazeSlot=v.POSTPROCESSING_ATMOSPHERE_TRANSPARENT;this._renderer=this._skyProgram=this._hazeProgram=
this._handles=null;this._renderData={texDepth:h.create(),v3CameraPos:d.create(),v3CameraUp:d.create(),v3CameraRight:d.create(),v3CameraDir:d.create(),halfSizeNearPlane:h.create(),v2CameraCenterOffset:h.create(),v4SphereComp:k.create(),v4AtmosParams1:k.create(),v4AtmosParams2:k.create(),v4AtmosParams3:k.create(),v3InvWavelength:x,v3InvWavelengthScaled:q,v4Radii:k.create(),fScale:0,fScaleDepth:.25,fLowerAlphaBlendBound:0,fScaleOverScaleDepth:0,fOneOverScaleDepth:0,fScaleDepthBlue:.05,fOneOverScaleDepthBlue:20,
fScaleOverScaleDepthBlue:0,g:-.99999,g2:-.99999*-.99999,fMiePhaseCoefficients:y,showTest:0,nearFar:h.create(),fCameraHeight:0,fCameraHeight2:0,fC:0,fCSur:0,fInnerFadeDistance:0,fAltitudeFade:0};this._lowerElevationBoundRadius=0;this._earthRadius=g;this.view=a;this._updateRadius(g)}c.prototype.destroy=function(){this._handles&&(this._handles.destroy(),this._handles=null);this._hazeProgram&&(this._hazeProgram.dispose(),this._hazeProgram=null);this._skyProgram&&(this._skyProgram.dispose(),this._skyProgram=
null)};c.prototype.when=function(a){return B.resolve().then(a)};c.prototype.initializeRenderContext=function(a){var e=this,b=F.createSquareGeometry([[-1,-1,1],[1,-1,1],[1,1,1],[-1,1,1]]).toRenderData(),f=a.rctx;this._renderer=new E(b,D.Pos3Tex,null,f);this._handles=new A;this._handles.add(n.init(this.view,"state.camera",function(a){return e._update(a)},!0));this._updateElevation({spatialReference:this.view.basemapTerrain.spatialReference,tile:this.view.basemapTerrain.rootTiles[0],extent:this.view.basemapTerrain.rootTiles[0].extent});
this._handles.add(n.on(this.view,"basemapTerrain","elevation-change",function(a){return e._updateElevation(a)},function(){return e._updateElevation()}));this._handles.add(n.on(this.view,"basemapTerrain","elevation-bounds-change",function(){return e._updateVisibleElevationBounds()},function(){return e._updateVisibleElevationBounds()}));a.shaderSnippets.fsRealisticAtmosphere||a.shaderSnippets._parse(z);this._hazeProgram=new w(f,a.shaderSnippets.vsRealisticAtmosphere,a.shaderSnippets.fsRealisticAtmosphere,
u.Default3D,["HAZE"]);this._skyProgram=new w(f,a.shaderSnippets.vsRealisticAtmosphere,a.shaderSnippets.fsRealisticAtmosphere,u.Default3D)};c.prototype.uninitializeRenderContext=function(a){this.destroy()};c.prototype.render=function(a){if(a.slot!==this._hazeSlot&&a.slot!==this.slot||a.pass!==G.MATERIAL)return!1;a.slot===this.slot&&this._renderSky(a);a.slot===this._hazeSlot&&this._renderHaze(a);this.needsRender=!1;return!0};c.prototype._renderSky=function(a){var e=a.rctx,b=e.gl,f=this._skyProgram;
e.bindProgram(f);e.setBlendFunctionSeparate(b.SRC_ALPHA,b.ONE_MINUS_SRC_ALPHA,b.ONE,b.ONE_MINUS_SRC_ALPHA);e.setDepthFunction(b.LEQUAL);e.setDepthTestEnabled(!0);f.setUniform4fv("v4AtmosParams3",this._renderData.v4AtmosParams3);this._renderCommon(f,a)};c.prototype._renderHaze=function(a){var e=this,b=a.rctx,f=b.gl,c=a.offscreenRenderingHelper,d=this._hazeProgram;b.bindProgram(d);b.setBlendFunctionSeparate(f.ONE,f.ONE_MINUS_SRC_COLOR,f.ZERO,f.ONE);c.renderDepthDetached(function(){b.setDepthTestEnabled(!1);
b.bindTexture(c.depthTexture,0);d.setUniform1i("tDepth",0);e._renderCommon(d,a)})};c.prototype._renderCommon=function(a,e){var b=e.rctx,f=b.gl;a.setUniform3fv("v3InvWavelength",this._renderData.v3InvWavelength);a.setUniform3fv("v3InvWavelengthScaled",this._renderData.v3InvWavelengthScaled);a.setUniform3fv("v3LightDir",e.lightingData.direction);a.setUniform4fv("v4SphereComp",this._renderData.v4SphereComp);a.setUniform3fv("v3CameraPos",this._renderData.v3CameraPos);a.setUniform3fv("v3CameraUp",this._renderData.v3CameraUp);
a.setUniform3fv("v3CameraRight",this._renderData.v3CameraRight);a.setUniform3fv("v3CameraDir",this._renderData.v3CameraDir);a.setUniform2fv("nearFar",this._renderData.nearFar);a.setUniform2fv("halfSizeNearPlane",this._renderData.halfSizeNearPlane);a.setUniform2fv("v2CameraCenterOffset",this._renderData.v2CameraCenterOffset);a.setUniform4fv("v4Radii",this._renderData.v4Radii);a.setUniform4fv("v4AtmosParams1",this._renderData.v4AtmosParams1);a.setUniform4fv("v4AtmosParams2",this._renderData.v4AtmosParams2);
a.setUniform1f("showTest",this._renderData.showTest);a.setUniform1f("fInnerFadeDistance",this._renderData.fInnerFadeDistance);a.setUniform1f("fAltitudeFade",this._renderData.fAltitudeFade);b.setBlendingEnabled(!0);b.setDepthWriteEnabled(!1);this._renderer.render(a);b.setDepthFunction(f.LESS);b.setDepthTestEnabled(!1);b.setDepthWriteEnabled(!0);b.setBlendingEnabled(!1);b.setBlendFunctionSeparate(f.SRC_ALPHA,f.ONE_MINUS_SRC_ALPHA,f.ONE,f.ONE_MINUS_SRC_ALPHA)};c.prototype._adjustRadiusForTesselation=
function(a){return a*Math.cos(Math.PI/Math.pow(2,4)/16)};c.prototype._normalizeRadius=function(a){a=this._adjustRadiusForTesselation(a);return Math.max(g-1E4,Math.min(a,g))};c.prototype._updateElevation=function(a){a=a?a.tile:this.view.basemapTerrain.rootTiles[0];0===a.lij[0]&&(a=this._adjustRadiusForTesselation(g+a.elevationBounds[0]),a!==this._lowerElevationBoundRadius&&(this._lowerElevationBoundRadius=a,this._earthRadius=-1,this._updateVisibleElevationBounds()))};c.prototype._updateVisibleElevationBounds=
function(){var a=this._adjustRadiusForTesselation(g+this.view.basemapTerrain.getElevationBounds()[0]);return 0>this._earthRadius||a<this._earthRadius?this._updateRadius(a):!1};c.prototype._updateRadius=function(a){this._earthRadius=a;var e=a*a,b=a/10*10.25,f=b*b,c=1/(b-a),d=c/.25,h=c/.05,g=.3*(b-a)+a,m=1/(b-g),l=this._renderData;k.set4(c,.25,d,4,l.v4AtmosParams1);k.set4(-.99999,.05,h,20,l.v4AtmosParams2);k.set4(-.99999*-.99999,y,g,m,l.v4AtmosParams3);k.set4(a,e,b,f,l.v4Radii);l.fScale=c;l.fLowerAlphaBlendBound=
g;l.fScaleOverScaleDepth=d;l.fScaleOverScaleDepthBlue=h;e=t.INNER_ATMOSPHERE_DEPTH;l.fInnerFadeDistance=2*Math.sqrt((2*a-e)*e);this._update();return!0};c.prototype._update=function(a){void 0===a&&(a=this.view.get("state.camera"));a&&(d.negate(a.viewForward,this._renderData.v3CameraDir),d.set(a.viewUp,this._renderData.v3CameraUp),d.set(a.viewRight,this._renderData.v3CameraRight),this._renderData.fCameraHeight=d.length(a.eye),this._renderData.fCameraHeight2=this._renderData.fCameraHeight*this._renderData.fCameraHeight,
this._renderData.fC=this._renderData.fCameraHeight2-this._renderData.v4Radii[3],this._renderData.fCSur=this._renderData.fCameraHeight2-this._renderData.v4Radii[1],this._renderData.v4SphereComp=k.createFrom(this._renderData.fCameraHeight,this._renderData.fCameraHeight2,this._renderData.fC,this._renderData.fCSur),d.set(a.eye,this._renderData.v3CameraPos),h.set2(Math.tan(a.fovX/2)/(a.width/a.fullWidth),Math.tan(a.fovY/2)/(a.height/a.fullHeight),this._renderData.halfSizeNearPlane),h.set2((a.padding[3]+
a.width/2)/a.fullWidth-.5,(a.padding[2]+a.height/2)/a.fullHeight-.5,this._renderData.v2CameraCenterOffset),h.set2(a.near,a.far,this._renderData.nearFar),this._renderData.fAltitudeFade=t.computeInnerAltitudeFade(this._renderData.fCameraHeight-this._earthRadius))};c.isSupported=function(a){return a.rctx.capabilities.depthTexture};return c}()});