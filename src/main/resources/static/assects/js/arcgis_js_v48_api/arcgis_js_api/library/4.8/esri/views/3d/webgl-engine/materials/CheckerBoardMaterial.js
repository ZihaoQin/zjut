// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.8/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/webgl-engine/materials/CheckerBoardMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3csnippet name\x3d"vsCheckerBoard"\x3e\x3c![CDATA[\r\n  $vsprecisionf\r\n\r\n  uniform mat4 proj;\r\n  uniform mat4 view;\r\n  uniform mat4 model;\r\n\r\n  attribute vec3 $position;\r\n  attribute vec2 $uv0;\r\n\r\n  varying vec2 vUV;\r\n\r\n  void main(void) {\r\n    vUV \x3d $uv0;\r\n    gl_Position \x3d proj * view * vec4((model * vec4($position, 1.0)).xyz, 1.0);\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fsCheckerBoard"\x3e\x3c![CDATA[\r\n  $enableRequiredExtensions\r\n  $fsprecisionf\r\n\r\n  uniform vec2 size;\r\n  uniform vec4 color1;\r\n  uniform vec4 color2;\r\n\r\n  varying vec2 vUV;\r\n\r\n  void main() {\r\n    vec2 uvScaled \x3d vUV / (2.0 * size);\r\n\r\n    vec2 uv \x3d fract(uvScaled - 0.25);\r\n    vec2 ab \x3d clamp((abs(uv - 0.5) - 0.25) / fwidth(uvScaled), -0.5, 0.5);\r\n    float fade \x3d smoothstep(0.25, 0.5, max(fwidth(uvScaled.x), fwidth(uvScaled.y)));\r\n    float t \x3d mix(abs(ab.x + ab.y), 0.5, fade);\r\n\r\n    gl_FragColor \x3d mix(color2, color1, t);\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\x3c/snippets\x3e\r\n'}});
define("require exports ../../../../core/tsSupport/extendsHelper dojo/text!./CheckerBoardMaterial.xml ../lib/GLMaterial ../lib/Material ../lib/RenderSlot ../lib/ShaderVariations ../lib/Util ./internal/MaterialUtil ./internal/MaterialUtil".split(" "),function(f,w,g,p,q,r,k,t,l,e,m){var n=[{name:l.VertexAttrConstants.POSITION,count:3,type:5126,offset:0,stride:20,normalized:!1},{name:l.VertexAttrConstants.UV0,count:2,type:5126,offset:12,stride:20,normalized:!1}],u={size:[1,1],color1:[.75,.75,.75,1],
color2:[.5,.5,.5,1],transparent:!1,polygonOffset:!1};f=function(c){function a(b,a){a=c.call(this,a)||this;a.canBeMerged=!1;a.params=e.copyParameters(b,u);return a}g(a,c);a.prototype.dispose=function(){};a.prototype.getParameterValues=function(){var b=this.params;return{size:b.size,color1:b.color1,color2:b.color2,transparent:b.transparent,polygonOffset:b.polygonOffset}};a.prototype.setParameterValues=function(b){e.updateParameters(this.params,b)&&this.notifyDirty("matChanged")};a.prototype.getParams=
function(){return this.params};a.prototype.getOutputAmount=function(b){return 5*b};a.prototype.getInstanceBufferLayout=function(){};a.prototype.getVertexBufferLayout=function(){return n};a.prototype.fillInterleaved=function(b,a,d,c,e,h){m.fillInterleaved(b,a,d,c,n,e,h)};a.prototype.intersect=function(b,a,d,c,e,h,f,g){return m.intersectTriangleGeometry(b,a,d,c,e,h,f)};a.prototype.getGLMaterials=function(){return{color:v,depthShadowMap:void 0,normal:void 0,depth:void 0,highlight:void 0}};a.prototype.getAllTextureIds=
function(){return[]};a.loadShaders=function(b,a,d){b._parse(p);b=new t("checker-board",["vsCheckerBoard","fsCheckerBoard"],null,a,b,d);a.addShaderVariations("checker-board-material-shader-variations",b)};return a}(r);var v=function(c){function a(b,a,d){d=c.call(this,b,a)||this;d.programRep=a;d.params=e.copyParameters(b.getParams());d.selectProgram();return d}g(a,c);a.prototype.selectProgram=function(){this.program=this.programRep.getShaderVariationsProgram("checker-board-material-shader-variations",
[])};a.prototype.updateParameters=function(){this.params=this.material.getParameterValues();this.selectProgram()};a.prototype.beginSlot=function(b){return b===(this.params.transparent?k.TRANSPARENT_MATERIAL:k.OPAQUE_MATERIAL)};a.prototype.getProgram=function(){return this.program};a.prototype.getDrawMode=function(b){return b.gl.TRIANGLES};a.prototype.bind=function(b,a){a=this.program;b.setDepthTestEnabled(!0);b.setDepthWriteEnabled(!1);b.setFaceCullingEnabled(!1);this.params.transparent&&(b.setBlendingEnabled(!0),
b.setBlendFunctionSeparate(b.gl.SRC_ALPHA,b.gl.ONE_MINUS_SRC_ALPHA,b.gl.ONE,b.gl.ONE_MINUS_SRC_ALPHA));this.params.polygonOffset&&(b.setPolygonOffsetFillEnabled(!0),b.setPolygonOffset(0,-25));b.bindProgram(a);a.setUniform2fv("size",this.params.size);a.setUniform4fv("color1",this.params.color1);a.setUniform4fv("color2",this.params.color2)};a.prototype.bindView=function(a,c){a=c.origin;var b=this.getProgram();e.bindView(a,c.view,b)};a.prototype.bindInstance=function(a,c){this.getProgram().setUniformMatrix4fv("model",
c.transformation)};a.prototype.release=function(a){a.setDepthWriteEnabled(!0);this.params.transparent&&a.setBlendingEnabled(!1);this.params.polygonOffset&&a.setPolygonOffsetFillEnabled(!1)};return a}(q);return f});