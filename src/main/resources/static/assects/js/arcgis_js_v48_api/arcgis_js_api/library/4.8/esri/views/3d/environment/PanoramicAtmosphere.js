// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.8/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/environment/materials/SimpleAtmosphereMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3csnippet name\x3d"vsSimpleAtmosphere"\x3e\x3c![CDATA[\r\n  $vsprecisionf\r\n\r\n  uniform mat4 proj;\r\n  uniform mat4 view;\r\n\r\n#ifndef PANORAMIC\r\n  const float TWICEPI \x3d 2.0*3.14159265;\r\n  const float ATMOSPHERE_RIM_SEGMENTS \x3d 128.0;\r\n\r\n  uniform vec3 silCircleCenter;\r\n  uniform vec3 silCircleV1;\r\n  uniform vec3 silCircleV2;\r\n  uniform vec2 texV;\r\n\r\n  uniform float innerScale;  // scale for inner rim\r\n  varying float innerFactor; // 0: outer atmosphere, 1: inner atmosphere\r\n#endif\r\n\r\n  uniform vec3 lightDirection;\r\n\r\n  attribute vec3 $position;\r\n  varying vec2 vtc;\r\n  varying float falloff;\r\n\r\n  void main(void) {\r\n\r\n#ifdef PANORAMIC\r\n\r\n    vec3 pos \x3d $position;\r\n    float ndotl \x3d lightDirection.z;\r\n    vtc \x3d vec2(0, $position.z+0.05);\r\n\r\n#else\r\n\r\n    innerFactor \x3d clamp(-$position.z, 0.0, 1.0);\r\n    float scale \x3d $position.y * (1.0 + innerFactor * innerScale);\r\n    float phi \x3d $position.x * (TWICEPI / ATMOSPHERE_RIM_SEGMENTS) + 1.0;\r\n    vec3 pos \x3d  (silCircleCenter + sin(phi) * silCircleV1 + cos(phi) * silCircleV2) * scale;\r\n    float ndotl \x3d dot(normalize($position.y \x3e 0.0 ? pos: silCircleCenter), lightDirection);\r\n\r\n    vtc.x \x3d $position.x / ATMOSPHERE_RIM_SEGMENTS;\r\n    vtc.y \x3d texV.x * (1.0 - $position.z) + texV.y * $position.z;\r\n\r\n#endif\r\n\r\n    falloff \x3d max(0.0, smoothstep(-1.0, 0.8, 2.0 * ndotl));\r\n\r\n    gl_Position \x3d proj * view * vec4(pos, 1.0);\r\n    gl_Position.z \x3d gl_Position.w; // project atmosphere onto the far plane\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fsSimpleAtmosphere"\x3e\x3c![CDATA[\r\n  $fsprecisionf\r\n\r\n  uniform sampler2D tex;\r\n\r\n  varying vec2 vtc;\r\n  varying float falloff;\r\n\r\n#ifndef PANORAMIC\r\n  uniform float altitudeFade;\r\n  varying float innerFactor;\r\n#endif\r\n\r\n  void main() {\r\n    vec4 texColor \x3d texture2D(tex, vtc);\r\n\r\n#ifdef PANORAMIC\r\n    gl_FragColor \x3d texColor * falloff;\r\n#else\r\n    vec4 atmosphereColor \x3d texColor * falloff;\r\n    vec4 innerColor \x3d vec4(texColor.rgb * falloff, 1.0 - altitudeFade);\r\n    gl_FragColor \x3d mix(atmosphereColor, innerColor, smoothstep(0.0, 1.0, innerFactor));\r\n#endif\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"vsSimpleAtmosphereFade"\x3e\x3c![CDATA[\r\n  $vsprecisionf\r\n\r\n  attribute vec2 $position;\r\n\r\n  uniform vec3 lightDirection;\r\n  uniform vec3 cameraPosition;\r\n\r\n  uniform float undergroundFadeAlpha;\r\n\r\n  varying vec4 color;\r\n\r\n  void main(void) {\r\n    float ndotl \x3d dot(normalize(cameraPosition), lightDirection);\r\n    float lighting \x3d max(0.0, smoothstep(-1.0, 0.8, 2.0 * ndotl));\r\n\r\n    color \x3d vec4(vec3(lighting), undergroundFadeAlpha);\r\n\r\n    gl_Position \x3d vec4($position.xy, 1.0, 1.0); // on the far plane\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fsSimpleAtmosphereFade"\x3e\x3c![CDATA[\r\n  $fsprecisionf\r\n\r\n  varying vec4 color;\r\n\r\n  void main() {\r\n    gl_FragColor \x3d color;\r\n  }\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3c/snippets\x3e\r\n'}});
define("require exports dojo/text!./materials/SimpleAtmosphereMaterial.xml ./resources/SimpleAtmosphereTexture ../lib/glMatrix ../support/imageUtils ../webgl-engine/lib/DefaultVertexAttributeLocations ../webgl-engine/lib/DefaultVertexBufferLayouts ../webgl-engine/lib/GeometryRenderer ../webgl-engine/lib/GeometryUtil ../webgl-engine/lib/RenderPass ../webgl-engine/lib/RenderSlot ../webgl-engine/lib/Util ../../webgl/Program ../../webgl/Texture".split(" "),function(z,A,k,l,m,n,p,q,r,t,u,v,w,x,y){var f=
m.mat4d,g=w.VertexAttrConstants,h=f.create();return function(){function e(b){this.view=null;this.needsRender=!1;this.didRender=!0;this.slot=v.POSTPROCESSING_ATMOSPHERE_OPAQUE;this._readyPromise=this._program=this._texture=this._renderer=null;this.view=b}e.prototype.destroy=function(){this._program&&(this._program.dispose(),this._program=null);this._texture&&(this._texture.dispose(),this._texture=null)};e.prototype.when=function(b){return this._readyPromise.then(b)};e.prototype.initializeRenderContext=
function(b){var a=this,c=this._createGeometryData(),d=b.rctx;this._renderer=new r(c,q.Pos3,null,d);b.shaderSnippets.vsSimpleAtmosphere||b.shaderSnippets._parse(k);this._program=new x(d,b.shaderSnippets.vsSimpleAtmosphere,b.shaderSnippets.fsSimpleAtmosphere,p.Default3D,["PANORAMIC"]);this._readyPromise=n.requestImage(l).then(function(c){a._texture=new y(b.rctx,{pixelFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9729,flipped:!0},c);a.needsRender=!0})};e.prototype.uninitializeRenderContext=function(b){this.destroy()};
e.prototype.render=function(b){if(b.slot!==this.slot||b.pass!==u.MATERIAL||null==this._texture)return!1;var a=b.rctx,c=a.gl,d=this._program;a.bindProgram(d);a.bindTexture(this._texture);d.setUniform1i("tex",0);d.setUniformMatrix4fv("proj",b.camera.projectionMatrix);f.toRotationMat(b.camera.viewMatrix,h);d.setUniformMatrix4fv("view",h);d.setUniform4f("color",1,1,1,1);d.setUniform3fv("lightDirection",b.lightingData.direction);a.setDepthTestEnabled(!0);a.setFaceCullingEnabled(!0);a.setDepthFunction(c.LEQUAL);
a.setBlendingEnabled(!0);a.setDepthWriteEnabled(!1);this._renderer.render(this._program);a.setDepthWriteEnabled(!0);a.setBlendingEnabled(!1);a.setDepthFunction(c.LESS);a.setFaceCullingEnabled(!1);return!0};e.prototype._createGeometryData=function(){for(var b=t.createPolySphereGeometry(1,2,!1),a=b.indices[g.POSITION],c=0;c<a.length;c+=3){var d=a[c];a[c]=a[c+2];a[c+2]=d}a=b.getVertexAttr();d=a[g.NORMAL].data;for(c=0;c<d.length;c++)d[c]=-d[c];return{id:"panoramicatmosphere",indices:b.indices,vertexAttr:a,
preinterleaved:!1}};return e}()});