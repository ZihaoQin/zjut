// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.8/esri/copyright.txt for details.
//>>built
define("require exports ../../../../../core/libs/earcut/earcut ../../../../../geometry/SpatialReference ../../../../../geometry/support/intersects ../support/measurementUtils ../support/Quantity ../support/viewUtils ../../../lib/glMatrix ../../../support/earthUtils ../../../support/mathUtils ../../../support/mathUtils ../../../support/projectionUtils ../../../support/RenderCoordsHelper".split(" "),function(H,I,t,w,A,m,u,B,a,E,F,y,n,G){function C(a,b,e){b=new Float64Array(a.length*e);for(var d=0;d<
a.length;++d)for(var c=a[d],f=0;f<e;++f)b[d*e+f]=c[f];return b}return function(){function g(){this.positionsWorldCoords=[];this.positionsRenderCoords=[];this.positionsProjectedWorldCoords=[];this.positionsFittedRenderCoords=[];this.positionsGeographic=[];this.positionsSpherical=[];this.positionsStereographic=[];this.pathSegmentLengths=[];this.geodesicPathSegmentLengths=[];this.perimeterSegmentLengths=[];this.intersectingSegments=new Set;this.geodesicIntersectingSegments=new Set;this.areaCentroidWorldCoords=
a.vec3d.create();this.areaCentroidRenderCoords=a.vec3d.create();this.areaNormalRenderCoords=a.vec3d.create();this.geodesicAreaCentroidRenderCoords=a.vec3d.create();this.geodesicAreaNormalRenderCoords=a.vec3d.create();this._length=0;this._centroidRenderCoords=a.vec3d.create();this._planeWorldCoords=a.vec4d.create();this._worldUp=a.vec3d.create();this._worldTangent=a.vec3d.create();this._frame=[a.vec3d.create(),a.vec3d.create(),a.vec3d.create()];this._tempU=a.vec3d.create();this._tempV=a.vec3d.create();
this._tempVec3=a.vec3d.create();this._tempSphere={center:a.vec3d.create(),radius:0}}g.prototype.update=function(b,e,d,c,f,p,g,q){e.clear();this._resize(b.length);e=d.spatialReference.isWGS84||d.spatialReference.isWebMercator;for(var x=this.positionsGeographic,k=this.positionsWorldCoords,h=this.positionsRenderCoords,m=this.positionsSpherical,l=0;l<b.length;++l){var r=b.vertex(l);n.pointToVector(r,k[l],g);n.pointToVector(r,h[l],p);e&&(n.pointToVector(r,x[l],w.WGS84),n.pointToVector(r,m[l],n.SphericalECEFSpatialReference),
a.vec3d.normalize(m[l],m[l]))}b=this._updatePathLengths(f);this.pathLength=0<this._length?new u(c.normalizeDistance(b),"meters"):null;e?(b=this._updateGeodesicPathLengths(f),this.geodesicPathLength=0<this._length?new u(b,"meters"):null):this.geodesicPathLength=null;f?(this._updateArea(d,c,p,g,q),e&&this._updateGeodesicArea(d,p)):(this.geodesicTriangleIndices=this.triangleIndices=this.perimeterLength=this.geodesicArea=this.area=null,this.intersectingSegments.clear(),this.geodesicIntersectingSegments.clear())};
g.prototype._resize=function(b){b<this._length&&(this.positionsWorldCoords.length=b,this.positionsRenderCoords.length=b,this.positionsProjectedWorldCoords.length=b,this.positionsFittedRenderCoords.length=b,this.positionsGeographic.length=b,this.positionsSpherical.length=b,this.positionsStereographic.length=b,this.pathSegmentLengths.length=b,this.geodesicPathSegmentLengths.length=b,this._length=this.perimeterSegmentLengths.length=b);for(;this._length<b;)this.positionsWorldCoords.push(a.vec3d.create()),
this.positionsRenderCoords.push(a.vec3d.create()),this.positionsProjectedWorldCoords.push(a.vec2d.create()),this.positionsFittedRenderCoords.push(a.vec3d.create()),this.positionsGeographic.push(a.vec3d.create()),this.positionsSpherical.push(a.vec3d.create()),this.positionsStereographic.push(a.vec2d.create()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length};g.prototype._updatePathLengths=function(b){for(var e=this.positionsWorldCoords,
d=this.pathSegmentLengths,c=0,f=0;f<this._length;++f){var p=d[f]=a.vec3d.dist(e[f],e[(f+1)%this._length]);if(f<this._length-1||b)c+=p}return c};g.prototype._updateGeodesicPathLengths=function(b){for(var e=this.positionsGeographic,d=this.geodesicPathSegmentLengths,c=0,a=0;a<this._length;++a){var p=d[a]=m.segmentLengthGeodesicVector(e[a],e[(a+1)%this._length]);if(a<this._length-1||b)c+=p}return c};g.prototype._updateArea=function(b,e,d,c,f){var p=b.renderCoordsHelper;b=this.positionsWorldCoords;var g=
this.positionsRenderCoords,q=this.positionsProjectedWorldCoords,D=this.positionsFittedRenderCoords,k=this._planeWorldCoords,h=this._centroidRenderCoords;B.midpoint(g,h);p.worldUpAtPosition(h,this._worldUp);p.worldBasisAtPosition(h,G.BasisDimension.X,this._worldTangent);n.transformDirection(h,this._worldUp,d,this._worldUp,c);n.transformDirection(h,this._worldTangent,d,this._worldTangent,c);m.bestFitPlane(b,k);this.fittingMode=this._selectFittingMode(k,b,this._worldUp,f);var t=0;if("horizontal"===this.fittingMode){var l=
-Infinity;g.forEach(function(b,c){b=p.getAltitude(g[c]);b>l&&(l=b,t=c)})}f=b[t];var h=k,r=this._worldTangent;"horizontal"===this.fittingMode?h=this._worldUp:"vertical"===this.fittingMode&&(h=this._tempVec3,r=this._worldUp,y.makeOrthonormal(k,this._worldUp,h));a.vec3d.set(h,this._frame[2]);y.makeOrthonormal(r,h,this._frame[0]);a.vec3d.cross(this._frame[0],this._frame[2],this._frame[1]);a.vec3d.negate(this._frame[1]);for(var k=this._tempVec3,h=this._tempU,r=this._tempV,v=0;v<this._length;++v){var z=
q[v],w=D[v];a.vec3d.subtract(b[v],f,k);a.vec2d.set2(a.vec3d.dot(this._frame[0],k),a.vec3d.dot(this._frame[1],k),z);a.vec3d.scale(this._frame[0],z[0],h);a.vec3d.scale(this._frame[1],z[1],r);a.vec3d.add(h,r,k);a.vec3d.add(k,f);n.vectorToVector(k,c,w,d)}this.perimeterLength=0<this._length?new u(e.normalizeDistance(this._updatePerimeterLengths()),"meters"):null;B.midpoint(D,this.areaCentroidRenderCoords);n.vectorToVector(this.areaCentroidRenderCoords,d,this.areaCentroidWorldCoords,c);n.transformDirection(this.areaCentroidWorldCoords,
this._frame[2],c,this.areaNormalRenderCoords,d);this._updateIntersectingSegments();this.area=0===this.intersectingSegments.size?new u(e.normalizeArea(this._computeArea()),"square-meters"):null};g.prototype._updateGeodesicArea=function(b,e){b=b.renderCoordsHelper;e=this.positionsSpherical;var d=this.positionsStereographic,c=this._tempVec3,f=m.fitHemisphere(e,c);if(f){var g=this._tempU,x=this._tempV;y.tangentFrame(c,g,x);for(var q=0;q<this._length;++q){var t=a.vec3d.dot(e[q],g),k=a.vec3d.dot(e[q],x),
h=a.vec3d.dot(e[q],c);a.vec2d.set2(t/h,k/h,d[q])}a.vec3d.scale(c,E.earthRadius);b.toRenderCoords(c,n.SphericalECEFSpatialReference,this.geodesicAreaCentroidRenderCoords);b.worldUpAtPosition(this.geodesicAreaCentroidRenderCoords,this.geodesicAreaNormalRenderCoords);this._updateGeodesicIntersectingSegments();this.geodesicArea=f&&0===this.geodesicIntersectingSegments.size?new u(this._computeGeodesicArea(),"square-meters"):null}else this.geodesicArea=null};g.prototype._updatePerimeterLengths=function(){for(var b=
this.positionsProjectedWorldCoords,e=this.perimeterSegmentLengths,d=0,c=0;c<this._length;++c)var f=e[c]=a.vec2d.dist(b[c],b[(c+1)%this._length]),d=d+f;return d};g.prototype._updateIntersectingSegments=function(){var b=this.positionsProjectedWorldCoords,a=this.intersectingSegments;a.clear();for(var d=0;d<this._length;++d)for(var c=d+2;c<this._length;++c)(c+1)%this._length!==d&&A.segmentIntersects(b[d],b[(d+1)%this._length],b[c],b[(c+1)%this._length])&&(a.add(d),a.add(c))};g.prototype._computeArea=
function(){for(var b=this.positionsProjectedWorldCoords,a=C(b,2,2),a=this.triangleIndices=new Uint32Array(t(a,[],2)),d=0,c=0;c<a.length;c+=3)d+=m.triangleAreaEuclidean(b[a[c]],b[a[c+1]],b[a[c+2]]);return d};g.prototype._updateGeodesicIntersectingSegments=function(){var b=this.positionsStereographic,a=this.geodesicIntersectingSegments;a.clear();for(var d=0;d<this._length;++d)for(var c=d+2;c<this._length;++c)(c+1)%this._length!==d&&A.segmentIntersects(b[d],b[(d+1)%this._length],b[c],b[(c+1)%this._length])&&
(a.add(d),a.add(c))};g.prototype._computeGeodesicArea=function(){for(var a=this.positionsGeographic,e=C(this.positionsStereographic,2,2),e=this.geodesicTriangleIndices=new Uint32Array(t(e,[],2)),d=0,c=0;c<e.length;c+=3)d+=m.triangleAreaGeodesic(a[e[c]],a[e[c+1]],a[e[c+2]],w.WGS84);return d};g.prototype._selectFittingMode=function(b,e,d,c){var f=e.map(function(a){return Math.abs(m.planePointDistance(b,a))}).reduce(function(a,b){return Math.max(a,b)},0);m.boundingSphere(e,this._tempSphere);e=f/(2*this._tempSphere.radius);
var f=e<c.maxRelativeErrorAlmostCoplanar,g="horizontal";e<c.maxRelativeErrorCoplanar?g="oblique":f&&(g=Math.abs(a.vec3d.dot(d,b))>Math.cos(F.deg2rad(c.verticalAngleThreshold))?"horizontal":"vertical");return g};return g}()});