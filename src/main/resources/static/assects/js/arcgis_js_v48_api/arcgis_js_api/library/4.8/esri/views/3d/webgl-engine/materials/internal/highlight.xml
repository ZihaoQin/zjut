<?xml version="1.0" encoding="UTF-8"?>

<snippets>

<!--
===============================================================================
Smartly downsamples a texture, halfing its resolution. This allows for a square
screen region to check if none, any or all pixels were set.

The red channel is always ceiled after interpolating the 4 merged pixels.
This allows to evaluate:
any(pixels.red != 0.0) as red == 1.0
none(pixels.red != 0.0) as red == 0.0

The green and blue channels are set to floor(max(green, blue)).
This allows to evaluate:
all(pixels.green || pixels.blue) as green == 1.0
===============================================================================
-->

<snippet name="vsConservativeDownsample"><![CDATA[

  $vsprecisionf

  attribute vec2 $position;

  void main()
  {
    gl_Position = vec4(vec2(1.0) - $position * 2.0, .0, 1.0);
  }
]]></snippet>

<snippet name="fsConservativeDownsample"><![CDATA[

  $fsprecisionf

  uniform sampler2D tex;
  uniform vec2 invFramebufferDim;

  void main()
  {
    vec2 coord = gl_FragCoord.xy * invFramebufferDim;
    vec4 value = texture2D(tex, coord);
    float mx = floor(max(value.g, value.b));
    gl_FragColor = vec4(ceil(value.r), mx, mx, 1.0);
  }
]]></snippet>

<!--
===============================================================================
Gaussian blur with linear sampling. Supports different number of samples, but
only 5 samples have proper weights. Uses linear texture interpolation to reduce
the number of samples taken.

Defines:
GRID_OPTIMIZATION (set or !set)
GAUSSIAN_SAMPLES (3,5,7)

This technique requires linear filtering on source texture
http://rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/
===============================================================================
-->
<snippet name="vsHighlightBlurFastGaussian"><![CDATA[

  $vsprecisionf

  attribute vec2 $position;
  attribute vec2 $uv0;

  #ifdef GRID_OPTIMIZATION
    uniform sampler2D coverageTex;
    varying vec3 blurCoordinate;
  #else
    uniform vec2 blurSize;
    varying vec2 blurCoordinates[GAUSSIAN_SAMPLES];
  #endif

  void main()
  {
    gl_Position = vec4($position, 0.0, 1.0);

    #ifdef GRID_OPTIMIZATION
      // sample the coverage texture at the block center
      // and if no coverage detected, create degenerate triangle
      vec4 cov = texture2D(coverageTex, $uv0);
      if (cov.r == 0.0) {
        gl_Position = vec4(0,0,0,0);
      }

      // create texture coordinate for blur center
      // encode information about fully inside block in z coordinate
      blurCoordinate = vec3(gl_Position.xy * .5 + vec2(.5), max(cov.g, cov.b));
    #else
      vec2 uv = $position.xy * .5 + vec2(.5);

      #if GAUSSIAN_SAMPLES == 3
        // not proper gaussian weights
        blurCoordinates[0] = uv;
        blurCoordinates[1] = uv + blurSize * 1.407333;
        blurCoordinates[2] = uv - blurSize * 1.407333;
      #elif GAUSSIAN_SAMPLES == 5
        blurCoordinates[0] = uv;
        blurCoordinates[1] = uv + blurSize * 1.407333;
        blurCoordinates[2] = uv - blurSize * 1.407333;
        blurCoordinates[3] = uv + blurSize * 3.294215;
        blurCoordinates[4] = uv - blurSize * 3.294215;
      #elif GAUSSIAN_SAMPLES == 7
        // not proper gaussian weights
        blurCoordinates[0] = uv;
        blurCoordinates[1] = uv + blurSize * 1.407333;
        blurCoordinates[2] = uv - blurSize * 1.407333;
        blurCoordinates[3] = uv + blurSize * 3.294215;
        blurCoordinates[4] = uv - blurSize * 3.294215;
        blurCoordinates[5] = uv + blurSize * 5.1;
        blurCoordinates[6] = uv - blurSize * 5.1;
      #elif GAUSSIAN_SAMPLES == 9
        // not proper gaussian weights
        blurCoordinates[0] = uv;
        blurCoordinates[1] = uv + blurSize * 1.407333;
        blurCoordinates[2] = uv - blurSize * 1.407333;
        blurCoordinates[3] = uv + blurSize * 3.294215;
        blurCoordinates[4] = uv - blurSize * 3.294215;
        blurCoordinates[5] = uv + blurSize * 5.1;
        blurCoordinates[6] = uv - blurSize * 5.1;
        blurCoordinates[7] = uv + blurSize * 7.1;
        blurCoordinates[8] = uv - blurSize * 7.1;
      #endif
    #endif
  }
]]></snippet>

<snippet name="fsHighlightBlurFastGaussian"><![CDATA[

  $fsprecisionf

  uniform sampler2D tex;

  #ifdef GRID_OPTIMIZATION
    uniform vec2 blurSize;
    varying vec3 blurCoordinate;
  #else
    varying vec2 blurCoordinates[GAUSSIAN_SAMPLES];
  #endif

  void main()
  {
    #ifdef GRID_OPTIMIZATION
      vec2 uv = blurCoordinate.xy;
      vec4 center = texture2D(tex, uv);

      // do not blur if no pixel or all pixels in neighborhood are set
      if (blurCoordinate.z == 1.0) {
        gl_FragColor = center;
      }
      else {
        vec4 sum = vec4(0.0);

        #if GAUSSIAN_SAMPLES == 3
          // not proper gaussian weights
          sum += center * 0.204164;
          sum += texture2D(tex, uv + blurSize * 1.407333) * 0.304005;
          sum += texture2D(tex, uv - blurSize * 1.407333) * 0.304005;
        #elif GAUSSIAN_SAMPLES == 5
          sum += center * 0.204164;
          sum += texture2D(tex, uv + blurSize * 1.407333) * 0.304005;
          sum += texture2D(tex, uv - blurSize * 1.407333) * 0.304005;
          sum += texture2D(tex, uv + blurSize * 3.294215) * 0.093913;
          sum += texture2D(tex, uv - blurSize * 3.294215) * 0.093913;
        #elif GAUSSIAN_SAMPLES == 7
          // not proper gaussian weights
          sum += center * 0.204164;
          sum += texture2D(tex, uv + blurSize * 1.407333) * 0.304005;
          sum += texture2D(tex, uv - blurSize * 1.407333) * 0.304005;
          sum += texture2D(tex, uv + blurSize * 3.294215) * 0.093913;
          sum += texture2D(tex, uv - blurSize * 3.294215) * 0.093913;
          sum += texture2D(tex, uv + blurSize * 5.1) * 0.03;
          sum += texture2D(tex, uv - blurSize * 5.1) * 0.03;
        #elif GAUSSIAN_SAMPLES == 9
          // not proper gaussian weights
          sum += center * 0.154164;
          sum += texture2D(tex, uv + blurSize * 1.5) * 0.204005;
          sum += texture2D(tex, uv - blurSize * 1.5) * 0.204005;
          sum += texture2D(tex, uv + blurSize * 3.5) * 0.123913;
          sum += texture2D(tex, uv - blurSize * 3.5) * 0.123913;
          sum += texture2D(tex, uv + blurSize * 5.5) * 0.123913;
          sum += texture2D(tex, uv - blurSize * 5.5) * 0.123913;
          sum += texture2D(tex, uv + blurSize * 7.5) * 0.05;
          sum += texture2D(tex, uv - blurSize * 7.5) * 0.05;
        #endif

        gl_FragColor = sum;
      }
    #else
      vec4 sum = vec4(0.0);

      #if GAUSSIAN_SAMPLES == 3
        // not proper gaussian weights
        sum += texture2D(tex, blurCoordinates[0]) * 0.204164;
        sum += texture2D(tex, blurCoordinates[1]) * 0.304005;
        sum += texture2D(tex, blurCoordinates[2]) * 0.304005;
      #elif GAUSSIAN_SAMPLES == 5
        sum += texture2D(tex, blurCoordinates[0]) * 0.204164;
        sum += texture2D(tex, blurCoordinates[1]) * 0.304005;
        sum += texture2D(tex, blurCoordinates[2]) * 0.304005;
        sum += texture2D(tex, blurCoordinates[3]) * 0.093913;
        sum += texture2D(tex, blurCoordinates[4]) * 0.093913;
      #elif GAUSSIAN_SAMPLES == 7
        // not proper gaussian weights
        sum += texture2D(tex, blurCoordinates[0]) * 0.204164;
        sum += texture2D(tex, blurCoordinates[1]) * 0.304005;
        sum += texture2D(tex, blurCoordinates[2]) * 0.304005;
        sum += texture2D(tex, blurCoordinates[3]) * 0.093913;
        sum += texture2D(tex, blurCoordinates[4]) * 0.093913;
        sum += texture2D(tex, blurCoordinates[5]) * 0.03;
        sum += texture2D(tex, blurCoordinates[6]) * 0.03;
      #elif GAUSSIAN_SAMPLES == 9
        // not proper gaussian weights
        sum += texture2D(tex, blurCoordinates[0]) * 0.154164;
        sum += texture2D(tex, blurCoordinates[1]) * 0.204005;
        sum += texture2D(tex, blurCoordinates[2]) * 0.204005;
        sum += texture2D(tex, blurCoordinates[3]) * 0.123913;
        sum += texture2D(tex, blurCoordinates[4]) * 0.123913;
        sum += texture2D(tex, blurCoordinates[5]) * 0.09;
        sum += texture2D(tex, blurCoordinates[6]) * 0.09;
        sum += texture2D(tex, blurCoordinates[7]) * 0.05;
        sum += texture2D(tex, blurCoordinates[8]) * 0.05;
      #endif

      gl_FragColor = sum;
    #endif
  }
]]></snippet>

<!--
===============================================================================
Merging blurred outlines with source image, advanced version

Defines:
GRID_OPTIMIZATION (set or !set)
GRID_DEBUG (set or !set)
===============================================================================
-->
<snippet name="vsHighlightApply"><![CDATA[

  $vsprecisionf

  attribute vec2 $position;
  varying vec2 uv;

  #ifdef GRID_OPTIMIZATION
    attribute vec2 $uv0;
    uniform sampler2D coverageTex;
  #endif

  void main()
  {
    #ifdef GRID_OPTIMIZATION
      #ifdef GRID_DEBUG
        vec4 cov = texture2D(coverageTex, $uv0);
        // if no highlight pixel set in this block,
        // or all pixels set, hide block
        if (cov.r == 0.0 || cov.g == 1.0 || cov.b == 1.0) {
          gl_Position = vec4(0,0,0,0);
          return;
        }
        gl_Position = vec4($position, .0, 1.0);
        uv = $uv0;
        return;
      #else
        vec4 cov = texture2D(coverageTex, $uv0);
        // if no highlight pixel set in this block, hide block
        if (cov.r == 0.0) {
          gl_Position = vec4(0,0,0,0);
          return;
        }
      #endif
    #endif

    gl_Position = vec4($position, .0, 1.0);
    uv = $position.xy * .5 + vec2(.5);
  }
]]></snippet>

<snippet name="fsHighlightApply"><![CDATA[

  $fsprecisionf

  uniform sampler2D tex;
  uniform sampler2D origin;

  uniform vec4 color;
  uniform float outlineSize;
  uniform float blurSize;
  uniform vec4 opacities; // [outline, outlineOccluded, fill, fillOccluded]

  varying vec2 uv;

  void main()
  {
    #if defined(GRID_OPTIMIZATION) && defined(GRID_DEBUG)
      gl_FragColor = vec4(uv, 0, 1.0);
    #else
      // Read the highlight intensity from the blurred highlight image
      vec4 blurredHighlightValue = texture2D(tex, uv);
      float highlightIntensity = blurredHighlightValue.a;

      // Discard all pixels which are not affected by highlight
      if (highlightIntensity == 0.0) {
        discard;
      }

      vec4 origin_color = texture2D(origin, uv);

      float outlineIntensity;
      float fillIntensity;

      // if occluded
      if (blurredHighlightValue.g > blurredHighlightValue.b) {
        outlineIntensity = color.w * opacities[1];
        fillIntensity = color.w * opacities[3];
      }
      // if unoccluded
      else {
        outlineIntensity = color.w * opacities[0];
        fillIntensity = color.w * opacities[2];
      }

      float inner = 1.0 - outlineSize / 9.0;
      float outer = 1.0 - (outlineSize + blurSize) / 9.0;

      float outlineFactor = smoothstep(outer, inner, highlightIntensity);
      //float fillFactor = smoothstep(0.6, 0.72, highlightIntensity);
      float fillFactor = any(notEqual(origin_color, vec4(0.0, 0.0, 0.0, 0.0))) ? 1.0 : 0.0;
      float intensity = outlineIntensity * outlineFactor * (1.0 - fillFactor) + fillIntensity * fillFactor;

      // Blending equation: gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
      // I.e., color should not be premultiplied with alpha
      gl_FragColor = vec4(color.xyz, intensity);
    #endif
  }
]]></snippet>

</snippets>
