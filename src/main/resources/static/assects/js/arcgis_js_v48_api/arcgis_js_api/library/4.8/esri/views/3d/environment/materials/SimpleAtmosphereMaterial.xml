<?xml version="1.0" encoding="UTF-8"?>

<snippets>

<snippet name="vsSimpleAtmosphere"><![CDATA[
  $vsprecisionf

  uniform mat4 proj;
  uniform mat4 view;

#ifndef PANORAMIC
  const float TWICEPI = 2.0*3.14159265;
  const float ATMOSPHERE_RIM_SEGMENTS = 128.0;

  uniform vec3 silCircleCenter;
  uniform vec3 silCircleV1;
  uniform vec3 silCircleV2;
  uniform vec2 texV;

  uniform float innerScale;  // scale for inner rim
  varying float innerFactor; // 0: outer atmosphere, 1: inner atmosphere
#endif

  uniform vec3 lightDirection;

  attribute vec3 $position;
  varying vec2 vtc;
  varying float falloff;

  void main(void) {

#ifdef PANORAMIC

    vec3 pos = $position;
    float ndotl = lightDirection.z;
    vtc = vec2(0, $position.z+0.05);

#else

    innerFactor = clamp(-$position.z, 0.0, 1.0);
    float scale = $position.y * (1.0 + innerFactor * innerScale);
    float phi = $position.x * (TWICEPI / ATMOSPHERE_RIM_SEGMENTS) + 1.0;
    vec3 pos =  (silCircleCenter + sin(phi) * silCircleV1 + cos(phi) * silCircleV2) * scale;
    float ndotl = dot(normalize($position.y > 0.0 ? pos: silCircleCenter), lightDirection);

    vtc.x = $position.x / ATMOSPHERE_RIM_SEGMENTS;
    vtc.y = texV.x * (1.0 - $position.z) + texV.y * $position.z;

#endif

    falloff = max(0.0, smoothstep(-1.0, 0.8, 2.0 * ndotl));

    gl_Position = proj * view * vec4(pos, 1.0);
    gl_Position.z = gl_Position.w; // project atmosphere onto the far plane
  }
]]></snippet>

<snippet name="fsSimpleAtmosphere"><![CDATA[
  $fsprecisionf

  uniform sampler2D tex;

  varying vec2 vtc;
  varying float falloff;

#ifndef PANORAMIC
  uniform float altitudeFade;
  varying float innerFactor;
#endif

  void main() {
    vec4 texColor = texture2D(tex, vtc);

#ifdef PANORAMIC
    gl_FragColor = texColor * falloff;
#else
    vec4 atmosphereColor = texColor * falloff;
    vec4 innerColor = vec4(texColor.rgb * falloff, 1.0 - altitudeFade);
    gl_FragColor = mix(atmosphereColor, innerColor, smoothstep(0.0, 1.0, innerFactor));
#endif
  }
]]></snippet>

<snippet name="vsSimpleAtmosphereFade"><![CDATA[
  $vsprecisionf

  attribute vec2 $position;

  uniform vec3 lightDirection;
  uniform vec3 cameraPosition;

  uniform float undergroundFadeAlpha;

  varying vec4 color;

  void main(void) {
    float ndotl = dot(normalize(cameraPosition), lightDirection);
    float lighting = max(0.0, smoothstep(-1.0, 0.8, 2.0 * ndotl));

    color = vec4(vec3(lighting), undergroundFadeAlpha);

    gl_Position = vec4($position.xy, 1.0, 1.0); // on the far plane
  }
]]></snippet>

<snippet name="fsSimpleAtmosphereFade"><![CDATA[
  $fsprecisionf

  varying vec4 color;

  void main() {
    gl_FragColor = color;
  }
]]></snippet>

</snippets>
