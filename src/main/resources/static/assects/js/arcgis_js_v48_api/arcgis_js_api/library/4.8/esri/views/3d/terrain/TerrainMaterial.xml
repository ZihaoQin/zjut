<?xml version="1.0" encoding="UTF-8"?>

<snippets>

<snippet name="getOverlayColor"><![CDATA[
  vec4 getOverlayColor(vec4 texCoords, float opacity) {
    vec4 color = vec4(0, 0, 0, 0);

    if ((texCoords.x > 0.0) && (texCoords.x < 1.0) && (texCoords.y > 0.0) && (texCoords.y < 1.0)) {
      // inner overlay texture coordinates are within bounds -> sample from inner overlay
      color = texture2D(overlay0Tex, texCoords.xy);
    } else if ((texCoords.z > 0.0) && (texCoords.z < 1.0) && (texCoords.w > 0.0) && (texCoords.w < 1.0)) {
      // sample from outer overlay
      color = texture2D(overlay1Tex, texCoords.zw);
    }

    return color * opacity;
  }
]]></snippet>

<snippet name="applySkirts"><![CDATA[
  uniform float skirtScale;

  vec3 applySkirts(inout vec2 uv, vec3 vpos, vec3 vnormal) {
    float skirtLength = 0.0;

    if (uv.x >= 2.0) {
      skirtLength = uv.y * skirtScale;
      // decode original uv-coordinates (see `encodeSkirtPos`)
      vec2 x = vec2(uv.x) - vec2(3.5, 4.5);
      uv = clamp(vec2(1.5) - abs(x), vec2(0.0), vec2(1.0));
    }

    return vpos - vnormal * skirtLength;
  }
]]></snippet>

<snippet name="vsTerrain"><![CDATA[
  $vsprecisionf

  uniform mat4 proj;
  uniform mat4 view;
  uniform vec3 origin;
  uniform vec4 texOffsetAndScale;
  uniform mat4 viewNormal;

  attribute vec3 $position;
  attribute vec2 $uv0;
  varying vec2 vtc;
  varying vec3 vpos;
  varying vec3 vnormal;

#ifdef RECEIVE_SHADOWS
  varying float linearDepth;
#endif

#if defined(WIREFRAME) || defined(TILE_BORDERS)
  varying vec2 vuv;
#endif

#ifdef ATMOSPHERE
  uniform vec3 lightDirection;
  varying vec3 wpos;
  varying vec3 wview;
  varying vec3 wnormal;
  varying vec3 wlight;
#endif

#ifdef OVERLAY
  // these variables combine two possible overlays into one by using a vec4:
  // components x/y are x/y of overlay 0, and components z/w are x/y of overlay 1
  uniform vec4 overlayTexOffset;
  uniform vec4 overlayTexScale;
  varying vec4 vtcOverlay;
#endif

#ifdef SCREEN_SIZE_PERSPECTIVE /* debug only */

  uniform vec4 screenSizePerspective;

  varying float screenSizeDistanceToCamera;
  varying float screenSizeCosAngle;

#endif

$applySkirts

  void main(void) {
    vpos = $position;

#ifdef SPHERICAL
    vnormal = normalize(vpos + origin);
#else
    vnormal = vec3(0, 0, 1); // WARNING: up-axis dependent code
#endif

  vec2 uv = $uv0;
  vpos = applySkirts(uv, vpos, vnormal);

#ifdef ATMOSPHERE
    wpos = (view * vec4(vpos, 1.0)).xyz;
    wnormal = (viewNormal * vec4(normalize(vpos+origin), 1.0)).xyz;
    wlight = (view  * vec4(lightDirection, 1.0)).xyz;
#endif

#if defined(WIREFRAME) || defined(TILE_BORDERS)
    vuv = uv;
#endif

#ifdef SCREEN_SIZE_PERSPECTIVE /* debug only */

    vec3 viewPos = (view * vec4(vpos, 1.0)).xyz;

    screenSizeDistanceToCamera = length(viewPos);

    vec3 viewSpaceNormal = (viewNormal * vec4(normalize(vpos + origin), 1.0)).xyz;
    screenSizeCosAngle = abs(viewSpaceNormal.z);

#endif

    gl_Position = proj * view * vec4(vpos, 1.0);

#ifdef RECEIVE_SHADOWS
    // Shadowmap's cascading index used to be based on '1.0 / gl_FragCoord.w'
    // (i.e. the perspective interpolation of 'gl_Position.w'). Precision
    // issues on iPad/iPhone with the 'w' component require the depth to be
    // passed as varying to properly drive the cascading shadow map index.
    linearDepth = gl_Position.w;
#endif

    vtc = uv * texOffsetAndScale.zw + texOffsetAndScale.xy;

#ifdef OVERLAY
    vtcOverlay = vec4(uv, uv) * overlayTexScale + overlayTexOffset;
#endif
  }
]]></snippet>

<snippet name="fsTerrainCommon"><![CDATA[
  uniform vec3 lightDirection;
  uniform vec3 viewDirection;
  uniform sampler2D depthTex;
  uniform int shadowMapNum;
  uniform vec4 shadowMapDistance;
  uniform mat4 shadowMapMatrix[4];
  uniform float depthHalfPixelSz;
  uniform sampler2D ssaoTex;
  uniform vec4 viewportPixelSz;
  uniform sampler2D tex;
  uniform float opacity;

  varying vec3 vpos;
  varying vec3 vnormal;
  varying vec2 vtc;

#if defined(WIREFRAME) || defined(TILE_BORDERS)
  varying vec2 vuv;
#endif

#ifdef ATMOSPHERE
  varying vec3 wpos;
  varying vec3 wview;
  varying vec3 wnormal;
  varying vec3 wlight;
#endif

  $sceneLightingDefinitions

#ifdef SCREEN_SIZE_PERSPECTIVE /* debug only */
  $screenSizePerspective

  uniform vec4 screenSizePerspective;

  varying float screenSizeDistanceToCamera;
  varying float screenSizeCosAngle;
#endif

  const vec3 ambient = vec3(0.2,0.2,0.2);
  const vec3 diffuse = vec3(0.8,0.8,0.8);
  const float diffuseHardness = 2.5;

#ifdef OVERLAY
  uniform sampler2D overlay0Tex;
  uniform sampler2D overlay1Tex;
  uniform float overlayOpacity;
  varying vec4 vtcOverlay;

  $getOverlayColor
#endif

#ifdef RECEIVE_SHADOWS
	varying float linearDepth;
	$evalShadow
#endif

  float lum(vec3 c) {
    float max = max(max(c.r, c.g), c.b);
    float min = min(min(c.r, c.g), c.b);
    return (min + max) * 0.5;
  }

#ifdef ATMOSPHERE
  vec3 atmosphere(vec3 lightPos, vec3 normal, vec3 view) {
    vec3 surfaceColor   = vec3(0.0);
    vec3 fuzzySpecColor = vec3(1.0);
    vec3 subColor       = vec3(0.0);
    float rollOff       = 1.0;

    vec3 Ln = normalize(lightPos);
    vec3 Nn = normalize(normal);
    vec3 Hn = normalize(view + Ln);

    float ldn = dot(Ln, Nn);
    float diffComp = max(0.0, ldn);
    float vdn = 1.0 - dot(view, Nn);
    float ndv = dot(view, Ln);

    vec3 diffContrib = surfaceColor * diffComp;
    float subLamb = max(0.0, smoothstep(-rollOff, 1.0, ldn) - smoothstep(0.0, 1.0, ldn));

    vec3 subContrib = subLamb * subColor;
    vec3 vecColor = vec3(vdn);

    vec3 diffuseContrib = (subContrib + diffContrib);
    vec3 specularContrib = (vecColor * fuzzySpecColor);

    return (diffContrib + specularContrib) * rollOff;
  }
#endif

  void main() {
    vec3 a = ambient;

    float shadow = 0.0;
#ifdef RECEIVE_SHADOWS
    shadow = evalShadow(vpos, linearDepth, depthTex, shadowMapNum, shadowMapDistance, shadowMapMatrix, depthHalfPixelSz);
#endif
    float vndl = dot(normalize(vnormal), lightDirection);
    float k = smoothstep(0.0, 1.0, clamp(vndl*diffuseHardness, 0.0, 1.0));
    vec3 d = (1.0 - shadow/1.8) * diffuse * k;

    float ssao = viewportPixelSz.w < .0 ? 1.0 : texture2D(ssaoTex, (gl_FragCoord.xy - viewportPixelSz.xy) * viewportPixelSz.zw).a;
    vec4 tileColor = texture2D(tex, vtc) * opacity;

#ifdef OVERLAY
    vec4 overlayColor = getOverlayColor(vtcOverlay, overlayOpacity);

    // tileColor and overlayTexCols have pre-multiplied alpha
    tileColor = tileColor * (1.0 - overlayColor.a) + overlayColor;
#endif

    vec3 atm = vec3(0.0);
#ifdef ATMOSPHERE
    float ndotl = max(0.0, min(1.0, vndl));
    atm = atmosphere(wlight, wnormal, -viewDirection);
    atm *= max(0.0, min(1.0, (1.0-lum(tileColor.rgb)*1.5))); //avoid atmosphere on bright base maps
    atm *= max(0.0, min(1.0, ndotl*2.0)); // avoid atmosphere on dark side of the globe
    atm *= tileColor.a; // premultiply with tile alpha
#endif

    vec3 albedo = atm + tileColor.rgb;
    vec3 normal = normalize(vnormal);

    // heuristic shading function used in the old terrain, now used to add ambient lighting
    float additionalAmbientScale = smoothstep(0.0, 1.0, clamp(vndl*2.5, 0.0, 1.0));
		vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;

    gl_FragColor = vec4(evaluateSceneLighting(normal, albedo, shadow, 1.0 - ssao, additionalLight), tileColor.a);

#ifdef SCREEN_SIZE_PERSPECTIVE /* debug only */
    // This is only used for debug rendering the screenSize perspective

    float perspectiveScale = screenSizePerspectiveScaleFloat(1.0, screenSizeCosAngle, screenSizeDistanceToCamera, screenSizePerspective);

    if (perspectiveScale <= 0.25) {
      gl_FragColor = mix(gl_FragColor, vec4(1, 0, 0, 1), perspectiveScale * 4.0);
    }
    else if (perspectiveScale <= 0.5) {
      gl_FragColor = mix(gl_FragColor, vec4(0, 0, 1, 1), (perspectiveScale - 0.25) * 4.0);
    }
    else if (perspectiveScale >= 0.99) {
      gl_FragColor = mix(gl_FragColor, vec4(0, 1, 0, 1), 0.2);
    }
    else {
      gl_FragColor = mix(gl_FragColor, vec4(1, 0, 1, 1), (perspectiveScale - 0.5) * 2.0);
    }

#endif

  // closing } is missing here, it's in the shaders using this snippet below

]]></snippet>

<snippet name="fsTerrainWireframe"><![CDATA[
  $enableRequiredExtensions
  $fsprecisionf

  struct WireframeSettings {
    float width;
    float falloff;
    float subdivision;
    vec4 color;
    float wireOpacity;
    float surfaceOpacity;
  };

  uniform WireframeSettings wireframe;

    $fsTerrainCommon

    vec2 vuvScaled = vuv * wireframe.subdivision;
    vec2 vuvMod = fract(vuvScaled);

    vec2 dVuv = fwidth(vuvScaled);
    dVuv = max(vec2(0.00001), dVuv); // workaround against flickering skirts, see #10245

    vec2 edgeFactors = smoothstep((wireframe.width - wireframe.falloff) * dVuv,
                                  wireframe.width * dVuv, min(vuvMod, 1.0 - vuvMod));

    float edgeFactor = 1.0 - min(edgeFactors.x, edgeFactors.y);

#ifdef WIREFRAME
    vec3 wireframeColor = mix(gl_FragColor.rgb, wireframe.color.rgb, edgeFactor * wireframe.color.a);
    float wireframeAlpha = mix(wireframe.surfaceOpacity, wireframe.wireOpacity, edgeFactor);
    gl_FragColor = vec4(wireframeColor * wireframeAlpha, wireframeAlpha * gl_FragColor.a);
#endif


#ifdef TILE_BORDERS
    dVuv = fwidth(vuv);
    edgeFactors = smoothstep((wireframe.width - wireframe.falloff) * dVuv,
                              wireframe.width * dVuv, min(vuv, 1.0 - vuv));
    edgeFactor = 1.0 - min(edgeFactors.x, edgeFactors.y);

    gl_FragColor = mix(gl_FragColor, vec4(1.0, 0.0, 0.0, 1.0), edgeFactor);
#endif
  }
]]></snippet>

<snippet name="fsTerrain"><![CDATA[
    $fsprecisionf
    $fsTerrainCommon
  }
]]></snippet>

<snippet name="vsTerrainNormal"><![CDATA[
  $vsprecisionf

  uniform vec3 origin;
  uniform mat4 proj;
  uniform mat4 view;
  uniform mat4 viewNormal;
  attribute vec3 $position;
  attribute vec2 $uv0;
  varying vec3 vnormal;

$applySkirts

  void main(void) {
#ifdef SPHERICAL
    vec4 normal = vec4(normalize($position + origin), 1.0);
#else
    vec4 normal = vec4(0.0, 0.0, 1.0, 1.0);
#endif

    vec2 uv = $uv0;
    vec3 vpos = applySkirts(uv, $position, normal.xyz);

    gl_Position = proj * view * vec4(vpos, 1.0);
    vnormal = normalize((viewNormal * normal).xyz);
  }
]]></snippet>

<snippet name="vsTerrainDepth"><![CDATA[
  $vsprecisionf

  uniform vec3 origin;
  uniform mat4 proj;
  uniform mat4 view;
  uniform vec2 nearFar;
  attribute vec3 $position;
  attribute vec2 $uv0;
  varying float depth;

$applySkirts

  void main(void) {
#ifdef SPHERICAL
    vec3 normal = normalize($position + origin);
#else
    vec3 normal = vec3(0.0, 0.0, 1.0);
#endif

    vec2 uv = $uv0;
    vec3 vpos = applySkirts(uv, $position, normal.xyz);

    vec4 eye = view * vec4(vpos, 1.0);
    gl_Position = proj * eye;
    depth = (-eye.z - nearFar[0]) / (nearFar[1] - nearFar[0]) ;
  }
]]></snippet>

<snippet name="vsTerrainHighlight"><![CDATA[
  $vsprecisionf

  uniform vec3 origin;
  uniform mat4 proj;
  uniform mat4 view;
  uniform vec4 overlayTexScale;
  uniform vec4 overlayTexOffset;

  attribute vec3 $position;
  attribute vec2 $uv0;

  varying vec4 vtcOverlay;

$applySkirts

  void main() {
    #ifdef SPHERICAL
      vec3 vnormal = normalize($position + origin);
    #else
      vec3 vnormal = vec3(0, 0, 1); // WARNING: up-axis dependent code
    #endif

    vec2 uv = $uv0;
    vec3 vpos = applySkirts(uv, $position, vnormal);

    vtcOverlay = vec4(uv, uv) * overlayTexScale + overlayTexOffset;

    gl_Position = proj * view * vec4(vpos, 1.0);
  }
]]></snippet>

<snippet name="fsTerrainHighlight"><![CDATA[
  $fsprecisionf

  uniform sampler2D overlay0Tex;
  uniform sampler2D overlay1Tex;
  uniform float overlayOpacity;

  uniform sampler2D depthTex;
  uniform vec4 highlightViewportPixelSz;

  varying vec4 vtcOverlay;

  $getOverlayColor

  void main() {
    vec4 overlayColor = getOverlayColor(vtcOverlay, overlayOpacity);

    if (overlayColor.a == 0.0) {
      // Here we have to write black, instead of discarding the fragment in order to overwrite
      // the highlights which might have been written by skirts of other tiles.
      // As a consequence skirts are not visible, but terrain overwrites draped highlights.
      gl_FragColor = vec4(0,0,0,0);
      return;
    }

    $highlightWrite
  }
]]></snippet>

</snippets>
